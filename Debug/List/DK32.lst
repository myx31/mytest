
AVRASM ver. 2.1.30  C:\Users\Myx\Documents\avr\Debug\List\DK32.asm Wed Jan 03 09:15:11 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0069 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0084 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 0100
000034 0302
000035 0504
000036 0706      	.DB  0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7
000037 0908      	.DB  0x8,0x9
                 
                 __GLOBAL_INI_TBL:
000038 000a      	.DW  0x0A
000039 0160      	.DW  _number
00003a 0066      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0108 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;// dinh nghia chan
                 ;#define thuan PINC.0
                 ;#define nguoc PINC.1
                 ;#define tang PINC.2
                 ;#define giam PINC.3
                 ;#define dung PINC.4
                 ;
                 ;#define IN1 PORTD.0
                 ;#define IN2 PORTD.1
                 ;#define IN3 PORTD.2
                 ;#define IN4 PORTD.3
                 ;// dinh nghia hang so PID
                 ;#define kp 300
                 ;#define ki 100
                 ;
                 ;unsigned char number[10] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
                 
                 	.DSEG
                 ;
                 ;
                 ;void tangtoc(void);
                 ;void giamtoc(void);
                 ;void chaythuan(void);
                 ;void chaynguoc(void);
                 ;void dunglai(void);
                 ;void dieukhien(void);
                 ;
                 ;// Declare your global variables here
                 ;
                 ;long int n=0; // bien nay dem so lan ngoai vi dc kich hoat , tinh toan toc do dc
                 ;long int delta_v,toc_do,setpoint;// sai so toc do hien tai vs setpoint
                 ;long int sum_e=0; // so lg tich luy cua sai so, (PID)
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) // ngat nay dc kich hoat boi
                 ; 0000 0026 //mot ngat ngoai vi tren INT 0
                 ; 0000 0027 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000069 936a      	ST   -Y,R22
00006a 937a      	ST   -Y,R23
00006b 93aa      	ST   -Y,R26
00006c 93ba      	ST   -Y,R27
00006d 93ea      	ST   -Y,R30
00006e 93fa      	ST   -Y,R31
00006f b7ef      	IN   R30,SREG
000070 93ea      	ST   -Y,R30
                 ; 0000 0028     n++;// bien n tang len moi lan ngat say ra
000071 e6aa      	LDI  R26,LOW(_n)
000072 e0b1      	LDI  R27,HIGH(_n)
000073 940e 02f5 	CALL __GETD1P_INC
                +
000075 5fef     +SUBI R30 , LOW ( - 1 )
000076 4fff     +SBCI R31 , HIGH ( - 1 )
000077 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000078 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000079 940e 02fa 	CALL __PUTDP1_DEC
                 ; 0000 0029 } //  dem so xung tao ra boi ngoai vi
00007b 91e9      	LD   R30,Y+
00007c bfef      	OUT  SREG,R30
00007d 91f9      	LD   R31,Y+
00007e 91e9      	LD   R30,Y+
00007f 91b9      	LD   R27,Y+
000080 91a9      	LD   R26,Y+
000081 9179      	LD   R23,Y+
000082 9169      	LD   R22,Y+
000083 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)  // xu ly tran TImer0
                 ; 0000 002C {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000084 920a      	ST   -Y,R0
000085 921a      	ST   -Y,R1
000086 936a      	ST   -Y,R22
000087 937a      	ST   -Y,R23
000088 938a      	ST   -Y,R24
000089 939a      	ST   -Y,R25
00008a 93aa      	ST   -Y,R26
00008b 93ba      	ST   -Y,R27
00008c 93ea      	ST   -Y,R30
00008d 93fa      	ST   -Y,R31
00008e b7ef      	IN   R30,SREG
00008f 93ea      	ST   -Y,R30
                 ; 0000 002D // Place your code here
                 ; 0000 002E    // tinh toc do
                 ; 0000 002F     toc_do = 75*n; //toc do = (n/8*N)*1000*60
000090 91e0 016a 	LDS  R30,_n
000092 91f0 016b 	LDS  R31,_n+1
000094 9160 016c 	LDS  R22,_n+2
000096 9170 016d 	LDS  R23,_n+3
                +
000098 e4ab     +LDI R26 , LOW ( 0x4B )
000099 e0b0     +LDI R27 , HIGH ( 0x4B )
00009a e080     +LDI R24 , BYTE3 ( 0x4B )
00009b e090     +LDI R25 , BYTE4 ( 0x4B )
                 	__GETD2N 0x4B
00009c 940e 02b9 	CALL __MULD12
00009e 940e 01d3 	CALL SUBOPT_0x0
                 ; 0000 0030     sum_e += delta_v;  // tp tich phan
0000a0 940e 01dc 	CALL SUBOPT_0x1
0000a2 91a0 017a 	LDS  R26,_sum_e
0000a4 91b0 017b 	LDS  R27,_sum_e+1
0000a6 9180 017c 	LDS  R24,_sum_e+2
0000a8 9190 017d 	LDS  R25,_sum_e+3
0000aa 940e 0271 	CALL __ADDD12
0000ac 93e0 017a 	STS  _sum_e,R30
0000ae 93f0 017b 	STS  _sum_e+1,R31
0000b0 9360 017c 	STS  _sum_e+2,R22
0000b2 9370 017d 	STS  _sum_e+3,R23
                 ; 0000 0031    //reset n
                 ; 0000 0032    n=0;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 93e0 016a 	STS  _n,R30
0000b7 93e0 016b 	STS  _n+1,R30
0000b9 93e0 016c 	STS  _n+2,R30
0000bb 93e0 016d 	STS  _n+3,R30
                 ; 0000 0033 }
0000bd 91e9      	LD   R30,Y+
0000be bfef      	OUT  SREG,R30
0000bf 91f9      	LD   R31,Y+
0000c0 91e9      	LD   R30,Y+
0000c1 91b9      	LD   R27,Y+
0000c2 91a9      	LD   R26,Y+
0000c3 9199      	LD   R25,Y+
0000c4 9189      	LD   R24,Y+
0000c5 9179      	LD   R23,Y+
0000c6 9169      	LD   R22,Y+
0000c7 9019      	LD   R1,Y+
0000c8 9009      	LD   R0,Y+
0000c9 9518      	RETI
                 ; .FEND
                 ;
                 ;void hiemthi(unsigned int x)
                 ; 0000 0036 {
                 _hiemthi:
                 ; .FSTART _hiemthi
                 ; 0000 0037      unsigned int temp;
                 ; 0000 0038      //unsigned char a,b,c,d;
                 ; 0000 0039      unsigned char m[4],i ;
                 ; 0000 003A 
                 ; 0000 003B   // tach so, luu vao 4 bien a b c d
                 ; 0000 003C      temp=x;
0000ca 93ba      	ST   -Y,R27
0000cb 93aa      	ST   -Y,R26
0000cc 9724      	SBIW R28,4
0000cd 940e 0306 	CALL __SAVELOCR4
                 ;	x -> Y+8
                 ;	temp -> R16,R17
                 ;	m -> Y+4
                 ;	i -> R19
                +
0000cf 8508     +LDD R16 , Y + 8
0000d0 8519     +LDD R17 , Y + 8 + 1
                 	__GETWRS 16,17,8
                 ; 0000 003D      for(i=0;i<4;i++)
0000d1 e030      	LDI  R19,LOW(0)
                 _0x5:
0000d2 3034      	CPI  R19,4
0000d3 f4e0      	BRSH _0x6
                 ; 0000 003E      {
                 ; 0000 003F      m[3-i]=temp % 10;
0000d4 2fe3      	MOV  R30,R19
0000d5 e0f0      	LDI  R31,0
0000d6 e0a3      	LDI  R26,LOW(3)
0000d7 e0b0      	LDI  R27,HIGH(3)
0000d8 940e 02ff 	CALL __SWAPW12
0000da 1bea      	SUB  R30,R26
0000db 0bfb      	SBC  R31,R27
0000dc 01de      	MOVW R26,R28
0000dd 9614      	ADIW R26,4
0000de 0fea      	ADD  R30,R26
0000df 1ffb      	ADC  R31,R27
0000e0 01bf      	MOVW R22,R30
0000e1 01d8      	MOVW R26,R16
0000e2 e0ea      	LDI  R30,LOW(10)
0000e3 e0f0      	LDI  R31,HIGH(10)
0000e4 940e 02d1 	CALL __MODW21U
0000e6 01db      	MOVW R26,R22
0000e7 93ec      	ST   X,R30
                 ; 0000 0040      temp =temp/10;
0000e8 01d8      	MOVW R26,R16
0000e9 e0ea      	LDI  R30,LOW(10)
0000ea e0f0      	LDI  R31,HIGH(10)
0000eb 940e 02be 	CALL __DIVW21U
0000ed 018f      	MOVW R16,R30
                 ; 0000 0041      }
0000ee 5f3f      	SUBI R19,-1
0000ef cfe2      	RJMP _0x5
                 _0x6:
                 ; 0000 0042 
                 ; 0000 0043      // dieu khien cho LED1 sang, hiem thi chu so a
                 ; 0000 0044      PORTA.0 =0;
0000f0 98d8      	CBI  0x1B,0
                 ; 0000 0045      PORTB = number[m[0]];
0000f1 81ec      	LDD  R30,Y+4
0000f2 940e 01e5 	CALL SUBOPT_0x2
                 ; 0000 0046      delay_ms(1);
                 ; 0000 0047      PORTA.0 =1;
0000f4 9ad8      	SBI  0x1B,0
                 ; 0000 0048      // dieu khien cho LED2 sang, hiem thi chu so b
                 ; 0000 0049      PORTA.1 =0;
0000f5 98d9      	CBI  0x1B,1
                 ; 0000 004A      PORTB = number[m[1]];
0000f6 81ed      	LDD  R30,Y+5
0000f7 940e 01e5 	CALL SUBOPT_0x2
                 ; 0000 004B      delay_ms(1);
                 ; 0000 004C      PORTA.1 =1;
0000f9 9ad9      	SBI  0x1B,1
                 ; 0000 004D      // dieu khien cho LED3 sang, hiem thi chu so c
                 ; 0000 004E      PORTA.2 =0;
0000fa 98da      	CBI  0x1B,2
                 ; 0000 004F      PORTB = number[m[2]];
0000fb 81ee      	LDD  R30,Y+6
0000fc 940e 01e5 	CALL SUBOPT_0x2
                 ; 0000 0050      delay_ms(1);
                 ; 0000 0051      PORTA.2 =1;
0000fe 9ada      	SBI  0x1B,2
                 ; 0000 0052      // dieu khien cho LED4 sang, hiem thi chu so d
                 ; 0000 0053      PORTA.3 =0;
0000ff 98db      	CBI  0x1B,3
                 ; 0000 0054      PORTB = number[m[3]];
000100 81ef      	LDD  R30,Y+7
000101 940e 01e5 	CALL SUBOPT_0x2
                 ; 0000 0055      delay_ms(1);
                 ; 0000 0056      PORTA.3 =1;
000103 9adb      	SBI  0x1B,3
                 ; 0000 0057 
                 ; 0000 0058 }
000104 940e 030b 	CALL __LOADLOCR4
000106 962a      	ADIW R28,10
000107 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005B {
                 _main:
                 ; .FSTART _main
                 ; 0000 005C //Cong D
                 ; 0000 005D DDRD=0xff;
000108 efef      	LDI  R30,LOW(255)
000109 bbe1      	OUT  0x11,R30
                 ; 0000 005E PORTD.5=0;
00010a 9895      	CBI  0x12,5
                 ; 0000 005F 
                 ; 0000 0060 //cau hinh timer
                 ; 0000 0061 
                 ; 0000 0062 // Timer/Counter 1 initialization
                 ; 0000 0063 // Clock source: System Clock
                 ; 0000 0064 // Clock value: 8000.000 kHz
                 ; 0000 0065 // Mode: Fast PWM top=0x03FF
                 ; 0000 0066 // OC1A output: Non-Inverted PWM
                 ; 0000 0067 // OC1B output: Inverted PWM
                 ; 0000 0068 // Noise Canceler: Off
                 ; 0000 0069 // Input Capture on Falling Edge
                 ; 0000 006A // Timer Period: 0.128 ms
                 ; 0000 006B // Output Pulse(s):
                 ; 0000 006C // OC1A Period: 0.128 ms Width: 0 us
                 ; 0000 006D // OC1B Period: 0.128 ms Width: 0.128 ms
                 ; 0000 006E // Timer1 Overflow Interrupt: Off
                 ; 0000 006F // Input Capture Interrupt: Off
                 ; 0000 0070 // Compare A Match Interrupt: Off
                 ; 0000 0071 // Compare B Match Interrupt: Off
                 ; 0000 0072 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM11) | (1<<WGM10);
00010b ebe3      	LDI  R30,LOW(179)
00010c bdef      	OUT  0x2F,R30
                 ; 0000 0073 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00010d e0e9      	LDI  R30,LOW(9)
00010e bdee      	OUT  0x2E,R30
                 ; 0000 0074 TCNT1H=0x00;
00010f e0e0      	LDI  R30,LOW(0)
000110 bded      	OUT  0x2D,R30
                 ; 0000 0075 TCNT1L=0x00;
000111 bdec      	OUT  0x2C,R30
                 ; 0000 0076 ICR1H=0x00;
000112 bde7      	OUT  0x27,R30
                 ; 0000 0077 ICR1L=0x00;
000113 bde6      	OUT  0x26,R30
                 ; 0000 0078 OCR1AH=0x00;
000114 bdeb      	OUT  0x2B,R30
                 ; 0000 0079 OCR1AL=0x00;
000115 bdea      	OUT  0x2A,R30
                 ; 0000 007A OCR1BH=0x00;
000116 bde9      	OUT  0x29,R30
                 ; 0000 007B OCR1BL=0x00;
000117 bde8      	OUT  0x28,R30
                 ; 0000 007C 
                 ; 0000 007D // TIMER0 init
                 ; 0000 007E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000118 e0e4      	LDI  R30,LOW(4)
000119 bfe3      	OUT  0x33,R30
                 ; 0000 007F TCNT0=0x00;
00011a e0e0      	LDI  R30,LOW(0)
00011b bfe2      	OUT  0x32,R30
                 ; 0000 0080 OCR0=0x00;
00011c bfec      	OUT  0x3C,R30
                 ; 0000 0081 
                 ; 0000 0082 // Timer(s)/Counter(s) Interrupt(s) initialization // thanh ghi mat na ngat bo dem Tg
                 ; 0000 0083 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00011d e0e1      	LDI  R30,LOW(1)
00011e bfe9      	OUT  0x39,R30
                 ; 0000 0084 
                 ; 0000 0085 // External Interrupt(s) initialization
                 ; 0000 0086 // INT0: On
                 ; 0000 0087 // INT0 Mode: Falling Edge
                 ; 0000 0088 // INT1: Off
                 ; 0000 0089 // INT2: Off
                 ; 0000 008A GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2); // dk ngat chung
00011f b7eb      	IN   R30,0x3B
000120 64e0      	ORI  R30,0x40
000121 bfeb      	OUT  0x3B,R30
                 ; 0000 008B MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);//  ko su dung TH nay
000122 e0e2      	LDI  R30,LOW(2)
000123 bfe5      	OUT  0x35,R30
                 ; 0000 008C MCUCSR=(0<<ISC2);//dk co chung ( xoa co)
000124 e0e0      	LDI  R30,LOW(0)
000125 bfe4      	OUT  0x34,R30
                 ; 0000 008D GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000126 e4e0      	LDI  R30,LOW(64)
000127 bfea      	OUT  0x3A,R30
                 ; 0000 008E 
                 ; 0000 008F // cong
                 ; 0000 0090 PORTC =0xFF;
000128 efef      	LDI  R30,LOW(255)
000129 bbe5      	OUT  0x15,R30
                 ; 0000 0091 DDRB = 0xFF;
00012a bbe7      	OUT  0x17,R30
                 ; 0000 0092 DDRA=0xFF;
00012b bbea      	OUT  0x1A,R30
                 ; 0000 0093 
                 ; 0000 0094 while (1)
                 _0x19:
                 ; 0000 0095 {
                 ; 0000 0096       hiemthi(toc_do);
00012c 940e 01ee 	CALL SUBOPT_0x3
                 ; 0000 0097       dieukhien();
00012e d08d      	RCALL _dieukhien
                 ; 0000 0098       if(dung == 0)
00012f 9b9c      	SBIS 0x13,4
                 ; 0000 0099       {
                 ; 0000 009A         dunglai();
000130 d085      	RCALL _dunglai
                 ; 0000 009B       }
                 ; 0000 009C }
000131 cffa      	RJMP _0x19
                 ; 0000 009D }
                 _0x1D:
000132 cfff      	RJMP _0x1D
                 ; .FEND
                 ;void tangtoc(void)
                 ; 0000 009F {
                 _tangtoc:
                 ; .FSTART _tangtoc
                 ; 0000 00A0 
                 ; 0000 00A1       toc_do = toc_do + 1;
000133 940e 01f4 	CALL SUBOPT_0x4
                +
000135 5fef     +SUBI R30 , LOW ( - 1 )
000136 4fff     +SBCI R31 , HIGH ( - 1 )
000137 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000138 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000139 940e 01fd 	CALL SUBOPT_0x5
                 ; 0000 00A2       if (toc_do>10) { toc_do=10;}
                +
00013b 30ab     +CPI R26 , LOW ( 0xB )
00013c e0e0     +LDI R30 , HIGH ( 0xB )
00013d 07be     +CPC R27 , R30
00013e e0e0     +LDI R30 , BYTE3 ( 0xB )
00013f 078e     +CPC R24 , R30
000140 e0e0     +LDI R30 , BYTE4 ( 0xB )
000141 079e     +CPC R25 , R30
                 	__CPD2N 0xB
000142 f034      	BRLT _0x1E
                +
000143 e0ea     +LDI R30 , LOW ( 0xA )
000144 e0f0     +LDI R31 , HIGH ( 0xA )
000145 e060     +LDI R22 , BYTE3 ( 0xA )
000146 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000147 940e 01d3 	CALL SUBOPT_0x0
                 ; 0000 00A3       hiemthi(toc_do);
                 _0x1E:
000149 c016      	RJMP _0x2060001
                 ; 0000 00A4 }
                 ; .FEND
                 ;void giamtoc(void)
                 ; 0000 00A6 {
                 _giamtoc:
                 ; .FSTART _giamtoc
                 ; 0000 00A7 
                 ; 0000 00A8       toc_do = toc_do - 1;
00014a 940e 01f4 	CALL SUBOPT_0x4
                +
00014c 50e1     +SUBI R30 , LOW ( 1 )
00014d 40f0     +SBCI R31 , HIGH ( 1 )
00014e 4060     +SBCI R22 , BYTE3 ( 1 )
00014f 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
000150 940e 01fd 	CALL SUBOPT_0x5
                 ; 0000 00A9       if (toc_do<1) {toc_do=1;}
                +
000152 30a1     +CPI R26 , LOW ( 0x1 )
000153 e0e0     +LDI R30 , HIGH ( 0x1 )
000154 07be     +CPC R27 , R30
000155 e0e0     +LDI R30 , BYTE3 ( 0x1 )
000156 078e     +CPC R24 , R30
000157 e0e0     +LDI R30 , BYTE4 ( 0x1 )
000158 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000159 f434      	BRGE _0x1F
                +
00015a e0e1     +LDI R30 , LOW ( 0x1 )
00015b e0f0     +LDI R31 , HIGH ( 0x1 )
00015c e060     +LDI R22 , BYTE3 ( 0x1 )
00015d e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
00015e 940e 01d3 	CALL SUBOPT_0x0
                 ; 0000 00AA       hiemthi(toc_do);
                 _0x1F:
                 _0x2060001:
000160 91a0 0172 	LDS  R26,_toc_do
000162 91b0 0173 	LDS  R27,_toc_do+1
000164 df65      	RCALL _hiemthi
                 ; 0000 00AB }
000165 9508      	RET
                 ; .FEND
                 ;
                 ;void chaythuan(void)
                 ; 0000 00AE {
                 _chaythuan:
                 ; .FSTART _chaythuan
                 ; 0000 00AF 
                 ; 0000 00B0    while (dung!=0)
                 _0x20:
000166 9b9c      	SBIS 0x13,4
000167 c025      	RJMP _0x22
                 ; 0000 00B1    {
                 ; 0000 00B2     hiemthi(toc_do);
000168 940e 01ee 	CALL SUBOPT_0x3
                 ; 0000 00B3     IN1 = 0;
00016a 9890      	CBI  0x12,0
                 ; 0000 00B4     IN2 = 1;
00016b 9a91      	SBI  0x12,1
                 ; 0000 00B5     setpoint=50;
                +
00016c e3e2     +LDI R30 , LOW ( 0x32 )
00016d e0f0     +LDI R31 , HIGH ( 0x32 )
00016e e060     +LDI R22 , BYTE3 ( 0x32 )
00016f e070     +LDI R23 , BYTE4 ( 0x32 )
                 	__GETD1N 0x32
000170 940e 0207 	CALL SUBOPT_0x6
                 ; 0000 00B6     PORTD.5=1;
                 ; 0000 00B7     delay_ms(50);
                 ; 0000 00B8 
                 ; 0000 00B9     //TinhtoanPWM
                 ; 0000 00BA       delta_v = setpoint - toc_do;
                 ; 0000 00BB       if(delta_v<0)
000172 f41a      	BRPL _0x29
                 ; 0000 00BC       {
                 ; 0000 00BD         OCR1A=0;
000173 e0e0      	LDI  R30,LOW(0)
000174 e0f0      	LDI  R31,HIGH(0)
000175 c014      	RJMP _0x4C
                 ; 0000 00BE       }
                 ; 0000 00BF       else
                 _0x29:
                 ; 0000 00C0       {
                 ; 0000 00C1         if((kp*delta_v+ki*sum_e)>0x3ff) OCR1A = 0x3ff;
000176 940e 0232 	CALL SUBOPT_0x7
000178 937f      	PUSH R23
000179 936f      	PUSH R22
00017a 93ff      	PUSH R31
00017b 93ef      	PUSH R30
00017c 940e 023a 	CALL SUBOPT_0x8
00017e 91af      	POP  R26
00017f 91bf      	POP  R27
000180 918f      	POP  R24
000181 919f      	POP  R25
000182 940e 0249 	CALL SUBOPT_0x9
000184 f01c      	BRLT _0x2B
000185 efef      	LDI  R30,LOW(1023)
000186 e0f3      	LDI  R31,HIGH(1023)
000187 c002      	RJMP _0x4C
                 ; 0000 00C2         else OCR1A = kp*delta_v+ki*sum_e;
                 _0x2B:
000188 940e 0253 	CALL SUBOPT_0xA
                 _0x4C:
00018a bdfb      	OUT  0x2A+1,R31
00018b bdea      	OUT  0x2A,R30
                 ; 0000 00C3       }
                 ; 0000 00C4    }
00018c cfd9      	RJMP _0x20
                 _0x22:
                 ; 0000 00C5 
                 ; 0000 00C6 
                 ; 0000 00C7 }
00018d 9508      	RET
                 ; .FEND
                 ;
                 ;void chaynguoc(void)
                 ; 0000 00CA {
                 _chaynguoc:
                 ; .FSTART _chaynguoc
                 ; 0000 00CB 
                 ; 0000 00CC    while (dung!=0)
                 _0x2D:
00018e 9b9c      	SBIS 0x13,4
00018f c025      	RJMP _0x2F
                 ; 0000 00CD    {
                 ; 0000 00CE     hiemthi(toc_do);
000190 940e 01ee 	CALL SUBOPT_0x3
                 ; 0000 00CF     IN1 = 1;
000192 9a90      	SBI  0x12,0
                 ; 0000 00D0     IN2 = 0;
000193 9891      	CBI  0x12,1
                 ; 0000 00D1     setpoint=5;
                +
000194 e0e5     +LDI R30 , LOW ( 0x5 )
000195 e0f0     +LDI R31 , HIGH ( 0x5 )
000196 e060     +LDI R22 , BYTE3 ( 0x5 )
000197 e070     +LDI R23 , BYTE4 ( 0x5 )
                 	__GETD1N 0x5
000198 940e 0207 	CALL SUBOPT_0x6
                 ; 0000 00D2     PORTD.5=1;
                 ; 0000 00D3     delay_ms(50);
                 ; 0000 00D4 
                 ; 0000 00D5     //TinhtoanPWM
                 ; 0000 00D6       delta_v = setpoint - toc_do;// hieu so chenh lech
                 ; 0000 00D7       if(delta_v<0)
00019a f41a      	BRPL _0x36
                 ; 0000 00D8       {
                 ; 0000 00D9         OCR1A=0; // neu am chu ky nhiem =0
00019b e0e0      	LDI  R30,LOW(0)
00019c e0f0      	LDI  R31,HIGH(0)
00019d c014      	RJMP _0x4D
                 ; 0000 00DA       }
                 ; 0000 00DB       else
                 _0x36:
                 ; 0000 00DC       {  //neu ko am tinh PWM moi dua tren cong thuc kiem soat PID
                 ; 0000 00DD         if((kp*delta_v+ki*sum_e)>0x3ff) OCR1A = 0x3ff; // neu gia tri vuot 0x3FF dat ve toi da
00019e 940e 0232 	CALL SUBOPT_0x7
0001a0 937f      	PUSH R23
0001a1 936f      	PUSH R22
0001a2 93ff      	PUSH R31
0001a3 93ef      	PUSH R30
0001a4 940e 023a 	CALL SUBOPT_0x8
0001a6 91af      	POP  R26
0001a7 91bf      	POP  R27
0001a8 918f      	POP  R24
0001a9 919f      	POP  R25
0001aa 940e 0249 	CALL SUBOPT_0x9
0001ac f01c      	BRLT _0x38
0001ad efef      	LDI  R30,LOW(1023)
0001ae e0f3      	LDI  R31,HIGH(1023)
0001af c002      	RJMP _0x4D
                 ; 0000 00DE         else OCR1A = kp*delta_v+ki*sum_e;// dat gia tri PWM dua tren cong thuc kiem soat Pwm
                 _0x38:
0001b0 940e 0253 	CALL SUBOPT_0xA
                 _0x4D:
0001b2 bdfb      	OUT  0x2A+1,R31
0001b3 bdea      	OUT  0x2A,R30
                 ; 0000 00DF       }
                 ; 0000 00E0    }
0001b4 cfd9      	RJMP _0x2D
                 _0x2F:
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3 }
0001b5 9508      	RET
                 ; .FEND
                 ;void dunglai(void)
                 ; 0000 00E5 {
                 _dunglai:
                 ; .FSTART _dunglai
                 ; 0000 00E6     hiemthi(0000);
0001b6 e0a0      	LDI  R26,LOW(0)
0001b7 e0b0      	LDI  R27,0
0001b8 df11      	RCALL _hiemthi
                 ; 0000 00E7     IN1 = 0;
0001b9 9890      	CBI  0x12,0
                 ; 0000 00E8     IN2 = 0;
0001ba 9891      	CBI  0x12,1
                 ; 0000 00E9 
                 ; 0000 00EA }
0001bb 9508      	RET
                 ; .FEND
                 ;
                 ;void dieukhien(void)
                 ; 0000 00ED {
                 _dieukhien:
                 ; .FSTART _dieukhien
                 ; 0000 00EE   if (thuan==0)
0001bc 9b98      	SBIS 0x13,0
                 ; 0000 00EF   {
                 ; 0000 00F0    {
                 ; 0000 00F1    chaythuan();
0001bd dfa8      	RCALL _chaythuan
                 ; 0000 00F2    }
                 ; 0000 00F3   }
                 ; 0000 00F4   if (nguoc==0)
0001be 9b99      	SBIS 0x13,1
                 ; 0000 00F5   {
                 ; 0000 00F6      chaynguoc();
0001bf dfce      	RCALL _chaynguoc
                 ; 0000 00F7    }
                 ; 0000 00F8    if (tang==0)
0001c0 999a      	SBIC 0x13,2
0001c1 c007      	RJMP _0x40
                 ; 0000 00F9    {
                 ; 0000 00FA     while (tang==0);
                 _0x41:
0001c2 9b9a      	SBIS 0x13,2
0001c3 cffe      	RJMP _0x41
                 ; 0000 00FB     tangtoc();
0001c4 df6e      	RCALL _tangtoc
                 ; 0000 00FC     if (thuan==0)
0001c5 9b98      	SBIS 0x13,0
                 ; 0000 00FD     {
                 ; 0000 00FE     chaythuan();
0001c6 df9f      	RCALL _chaythuan
                 ; 0000 00FF     }
                 ; 0000 0100     if (nguoc==0)
0001c7 9b99      	SBIS 0x13,1
                 ; 0000 0101     {
                 ; 0000 0102     chaynguoc();
0001c8 dfc5      	RCALL _chaynguoc
                 ; 0000 0103     }
                 ; 0000 0104    }
                 ; 0000 0105    if (giam==0)
                 _0x40:
0001c9 999b      	SBIC 0x13,3
0001ca c007      	RJMP _0x46
                 ; 0000 0106    {
                 ; 0000 0107     while (giam==0);
                 _0x47:
0001cb 9b9b      	SBIS 0x13,3
0001cc cffe      	RJMP _0x47
                 ; 0000 0108     giamtoc();
0001cd df7c      	RCALL _giamtoc
                 ; 0000 0109     if (thuan==0)
0001ce 9b98      	SBIS 0x13,0
                 ; 0000 010A     {
                 ; 0000 010B     chaythuan();
0001cf df96      	RCALL _chaythuan
                 ; 0000 010C     }
                 ; 0000 010D     if (nguoc==0)
0001d0 9b99      	SBIS 0x13,1
                 ; 0000 010E     {
                 ; 0000 010F     chaynguoc();
0001d1 dfbc      	RCALL _chaynguoc
                 ; 0000 0110     }
                 ; 0000 0111    }
                 ; 0000 0112 
                 ; 0000 0113 }
                 _0x46:
0001d2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000160           	.BYTE 0xA
                 _n:
00016a           	.BYTE 0x4
                 _delta_v:
00016e           	.BYTE 0x4
                 _toc_do:
000172           	.BYTE 0x4
                 _setpoint:
000176           	.BYTE 0x4
                 _sum_e:
00017a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x0:
0001d3 93e0 0172 	STS  _toc_do,R30
0001d5 93f0 0173 	STS  _toc_do+1,R31
0001d7 9360 0174 	STS  _toc_do+2,R22
0001d9 9370 0175 	STS  _toc_do+3,R23
0001db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
0001dc 91e0 016e 	LDS  R30,_delta_v
0001de 91f0 016f 	LDS  R31,_delta_v+1
0001e0 9160 0170 	LDS  R22,_delta_v+2
0001e2 9170 0171 	LDS  R23,_delta_v+3
0001e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x2:
0001e5 e0f0      	LDI  R31,0
0001e6 5ae0      	SUBI R30,LOW(-_number)
0001e7 4ffe      	SBCI R31,HIGH(-_number)
0001e8 81e0      	LD   R30,Z
0001e9 bbe8      	OUT  0x18,R30
0001ea e0a1      	LDI  R26,LOW(1)
0001eb e0b0      	LDI  R27,0
0001ec 940c 0267 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0001ee 91a0 0172 	LDS  R26,_toc_do
0001f0 91b0 0173 	LDS  R27,_toc_do+1
0001f2 940c 00ca 	JMP  _hiemthi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0001f4 91e0 0172 	LDS  R30,_toc_do
0001f6 91f0 0173 	LDS  R31,_toc_do+1
0001f8 9160 0174 	LDS  R22,_toc_do+2
0001fa 9170 0175 	LDS  R23,_toc_do+3
0001fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0001fd dfd5      	RCALL SUBOPT_0x0
0001fe 91a0 0172 	LDS  R26,_toc_do
000200 91b0 0173 	LDS  R27,_toc_do+1
000202 9180 0174 	LDS  R24,_toc_do+2
000204 9190 0175 	LDS  R25,_toc_do+3
000206 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x6:
000207 93e0 0176 	STS  _setpoint,R30
000209 93f0 0177 	STS  _setpoint+1,R31
00020b 9360 0178 	STS  _setpoint+2,R22
00020d 9370 0179 	STS  _setpoint+3,R23
00020f 9a95      	SBI  0x12,5
000210 e3a2      	LDI  R26,LOW(50)
000211 e0b0      	LDI  R27,0
000212 940e 0267 	CALL _delay_ms
000214 91a0 0172 	LDS  R26,_toc_do
000216 91b0 0173 	LDS  R27,_toc_do+1
000218 9180 0174 	LDS  R24,_toc_do+2
00021a 9190 0175 	LDS  R25,_toc_do+3
00021c 91e0 0176 	LDS  R30,_setpoint
00021e 91f0 0177 	LDS  R31,_setpoint+1
000220 9160 0178 	LDS  R22,_setpoint+2
000222 9170 0179 	LDS  R23,_setpoint+3
000224 940e 027b 	CALL __SUBD12
000226 93e0 016e 	STS  _delta_v,R30
000228 93f0 016f 	STS  _delta_v+1,R31
00022a 9360 0170 	STS  _delta_v+2,R22
00022c 9370 0171 	STS  _delta_v+3,R23
00022e 91a0 0171 	LDS  R26,_delta_v+3
000230 23aa      	TST  R26
000231 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000232 dfa9      	RCALL SUBOPT_0x1
                +
000233 e2ac     +LDI R26 , LOW ( 0x12C )
000234 e0b1     +LDI R27 , HIGH ( 0x12C )
000235 e080     +LDI R24 , BYTE3 ( 0x12C )
000236 e090     +LDI R25 , BYTE4 ( 0x12C )
                 	__GETD2N 0x12C
000237 940e 02b9 	CALL __MULD12
000239 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
00023a 91e0 017a 	LDS  R30,_sum_e
00023c 91f0 017b 	LDS  R31,_sum_e+1
00023e 9160 017c 	LDS  R22,_sum_e+2
000240 9170 017d 	LDS  R23,_sum_e+3
                +
000242 e6a4     +LDI R26 , LOW ( 0x64 )
000243 e0b0     +LDI R27 , HIGH ( 0x64 )
000244 e080     +LDI R24 , BYTE3 ( 0x64 )
000245 e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
000246 940e 02b9 	CALL __MULD12
000248 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000249 940e 0276 	CALL __ADDD21
                +
00024b 30a0     +CPI R26 , LOW ( 0x400 )
00024c e0e4     +LDI R30 , HIGH ( 0x400 )
00024d 07be     +CPC R27 , R30
00024e e0e0     +LDI R30 , BYTE3 ( 0x400 )
00024f 078e     +CPC R24 , R30
000250 e0e0     +LDI R30 , BYTE4 ( 0x400 )
000251 079e     +CPC R25 , R30
                 	__CPD2N 0x400
000252 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xA:
000253 91e0 016e 	LDS  R30,_delta_v
000255 91f0 016f 	LDS  R31,_delta_v+1
000257 e2ac      	LDI  R26,LOW(300)
000258 e0b1      	LDI  R27,HIGH(300)
000259 940e 02b4 	CALL __MULW12
00025b 01bf      	MOVW R22,R30
00025c 91e0 017a 	LDS  R30,_sum_e
00025e 91f0 017b 	LDS  R31,_sum_e+1
000260 e6a4      	LDI  R26,LOW(100)
000261 e0b0      	LDI  R27,HIGH(100)
000262 940e 02b4 	CALL __MULW12
000264 0fe6      	ADD  R30,R22
000265 1ff7      	ADC  R31,R23
000266 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000267 9610      	adiw r26,0
000268 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000269 ed80     +LDI R24 , LOW ( 0x7D0 )
00026a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00026b 9701     +SBIW R24 , 1
00026c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00026d 95a8      	wdr
00026e 9711      	sbiw r26,1
00026f f7c9      	brne __delay_ms0
                 __delay_ms1:
000270 9508      	ret
                 
                 __ADDD12:
000271 0fea      	ADD  R30,R26
000272 1ffb      	ADC  R31,R27
000273 1f68      	ADC  R22,R24
000274 1f79      	ADC  R23,R25
000275 9508      	RET
                 
                 __ADDD21:
000276 0fae      	ADD  R26,R30
000277 1fbf      	ADC  R27,R31
000278 1f86      	ADC  R24,R22
000279 1f97      	ADC  R25,R23
00027a 9508      	RET
                 
                 __SUBD12:
00027b 1bea      	SUB  R30,R26
00027c 0bfb      	SBC  R31,R27
00027d 0b68      	SBC  R22,R24
00027e 0b79      	SBC  R23,R25
00027f 9508      	RET
                 
                 __ANEGW1:
000280 95f1      	NEG  R31
000281 95e1      	NEG  R30
000282 40f0      	SBCI R31,0
000283 9508      	RET
                 
                 __ANEGD1:
000284 95f0      	COM  R31
000285 9560      	COM  R22
000286 9570      	COM  R23
000287 95e1      	NEG  R30
000288 4fff      	SBCI R31,-1
000289 4f6f      	SBCI R22,-1
00028a 4f7f      	SBCI R23,-1
00028b 9508      	RET
                 
                 __MULW12U:
00028c 9ffa      	MUL  R31,R26
00028d 2df0      	MOV  R31,R0
00028e 9feb      	MUL  R30,R27
00028f 0df0      	ADD  R31,R0
000290 9fea      	MUL  R30,R26
000291 2de0      	MOV  R30,R0
000292 0df1      	ADD  R31,R1
000293 9508      	RET
                 
                 __MULD12U:
000294 9f7a      	MUL  R23,R26
000295 2d70      	MOV  R23,R0
000296 9f6b      	MUL  R22,R27
000297 0d70      	ADD  R23,R0
000298 9ff8      	MUL  R31,R24
000299 0d70      	ADD  R23,R0
00029a 9fe9      	MUL  R30,R25
00029b 0d70      	ADD  R23,R0
00029c 9f6a      	MUL  R22,R26
00029d 2d60      	MOV  R22,R0
00029e 0d71      	ADD  R23,R1
00029f 9ffb      	MUL  R31,R27
0002a0 0d60      	ADD  R22,R0
0002a1 1d71      	ADC  R23,R1
0002a2 9fe8      	MUL  R30,R24
0002a3 0d60      	ADD  R22,R0
0002a4 1d71      	ADC  R23,R1
0002a5 2788      	CLR  R24
0002a6 9ffa      	MUL  R31,R26
0002a7 2df0      	MOV  R31,R0
0002a8 0d61      	ADD  R22,R1
0002a9 1f78      	ADC  R23,R24
0002aa 9feb      	MUL  R30,R27
0002ab 0df0      	ADD  R31,R0
0002ac 1d61      	ADC  R22,R1
0002ad 1f78      	ADC  R23,R24
0002ae 9fea      	MUL  R30,R26
0002af 2de0      	MOV  R30,R0
0002b0 0df1      	ADD  R31,R1
0002b1 1f68      	ADC  R22,R24
0002b2 1f78      	ADC  R23,R24
0002b3 9508      	RET
                 
                 __MULW12:
0002b4 d01f      	RCALL __CHKSIGNW
0002b5 dfd6      	RCALL __MULW12U
0002b6 f40e      	BRTC __MULW121
0002b7 dfc8      	RCALL __ANEGW1
                 __MULW121:
0002b8 9508      	RET
                 
                 __MULD12:
0002b9 d028      	RCALL __CHKSIGND
0002ba dfd9      	RCALL __MULD12U
0002bb f40e      	BRTC __MULD121
0002bc dfc7      	RCALL __ANEGD1
                 __MULD121:
0002bd 9508      	RET
                 
                 __DIVW21U:
0002be 2400      	CLR  R0
0002bf 2411      	CLR  R1
0002c0 e190      	LDI  R25,16
                 __DIVW21U1:
0002c1 0faa      	LSL  R26
0002c2 1fbb      	ROL  R27
0002c3 1c00      	ROL  R0
0002c4 1c11      	ROL  R1
0002c5 1a0e      	SUB  R0,R30
0002c6 0a1f      	SBC  R1,R31
0002c7 f418      	BRCC __DIVW21U2
0002c8 0e0e      	ADD  R0,R30
0002c9 1e1f      	ADC  R1,R31
0002ca c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002cb 60a1      	SBR  R26,1
                 __DIVW21U3:
0002cc 959a      	DEC  R25
0002cd f799      	BRNE __DIVW21U1
0002ce 01fd      	MOVW R30,R26
0002cf 01d0      	MOVW R26,R0
0002d0 9508      	RET
                 
                 __MODW21U:
0002d1 dfec      	RCALL __DIVW21U
0002d2 01fd      	MOVW R30,R26
0002d3 9508      	RET
                 
                 __CHKSIGNW:
0002d4 94e8      	CLT
0002d5 fff7      	SBRS R31,7
0002d6 c002      	RJMP __CHKSW1
0002d7 dfa8      	RCALL __ANEGW1
0002d8 9468      	SET
                 __CHKSW1:
0002d9 ffb7      	SBRS R27,7
0002da c006      	RJMP __CHKSW2
0002db 95a0      	COM  R26
0002dc 95b0      	COM  R27
0002dd 9611      	ADIW R26,1
0002de f800      	BLD  R0,0
0002df 9403      	INC  R0
0002e0 fa00      	BST  R0,0
                 __CHKSW2:
0002e1 9508      	RET
                 
                 __CHKSIGND:
0002e2 94e8      	CLT
0002e3 ff77      	SBRS R23,7
0002e4 c002      	RJMP __CHKSD1
0002e5 df9e      	RCALL __ANEGD1
0002e6 9468      	SET
                 __CHKSD1:
0002e7 ff97      	SBRS R25,7
0002e8 c00b      	RJMP __CHKSD2
0002e9 2400      	CLR  R0
0002ea 95a0      	COM  R26
0002eb 95b0      	COM  R27
0002ec 9580      	COM  R24
0002ed 9590      	COM  R25
0002ee 9611      	ADIW R26,1
0002ef 1d80      	ADC  R24,R0
0002f0 1d90      	ADC  R25,R0
0002f1 f800      	BLD  R0,0
0002f2 9403      	INC  R0
0002f3 fa00      	BST  R0,0
                 __CHKSD2:
0002f4 9508      	RET
                 
                 __GETD1P_INC:
0002f5 91ed      	LD   R30,X+
0002f6 91fd      	LD   R31,X+
0002f7 916d      	LD   R22,X+
0002f8 917d      	LD   R23,X+
0002f9 9508      	RET
                 
                 __PUTDP1_DEC:
0002fa 937e      	ST   -X,R23
0002fb 936e      	ST   -X,R22
0002fc 93fe      	ST   -X,R31
0002fd 93ee      	ST   -X,R30
0002fe 9508      	RET
                 
                 __SWAPW12:
0002ff 2e1b      	MOV  R1,R27
000300 2fbf      	MOV  R27,R31
000301 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000302 2e1a      	MOV  R1,R26
000303 2fae      	MOV  R26,R30
000304 2de1      	MOV  R30,R1
000305 9508      	RET
                 
                 __SAVELOCR4:
000306 933a      	ST   -Y,R19
                 __SAVELOCR3:
000307 932a      	ST   -Y,R18
                 __SAVELOCR2:
000308 931a      	ST   -Y,R17
000309 930a      	ST   -Y,R16
00030a 9508      	RET
                 
                 __LOADLOCR4:
00030b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00030c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00030d 8119      	LDD  R17,Y+1
00030e 8108      	LD   R16,Y
00030f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  33 r1 :  18 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   3 r18:   2 r19:   6 r20:   0 r21:   0 r22:  43 r23:  42 
r24:  34 r25:  25 r26:  59 r27:  42 r28:   4 r29:   1 r30: 148 r31:  65 
x  :  12 y  :  52 z  :   8 
Registers used: 19 out of 35 (54.3%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  16 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   3 brmi  :   0 brne  :   6 brpl  :   2 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  :  41 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   9 
cp    :   0 cpc   :   9 cpi   :   4 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  24 ld    :  24 ldd   :   9 ldi   :  93 
lds   :  41 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  13 movw  :  13 
mul   :  13 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   0 
ori   :   1 out   :  35 pop   :   8 push  :   8 rcall :  23 ret   :  34 
reti  :   2 rjmp  :  22 rol   :   3 ror   :   0 sbc   :   5 sbci  :  14 
sbi   :   7 sbic  :   2 sbis  :  11 sbiw  :   6 sbr   :   1 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   0 sts   :  20 sub   :   3 subi  :   5 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 59 out of 116 (50.9%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000620   1532     36   1568   16384   9.6%
[.dseg] 0x000060 0x00017e      0     30     30    1024   2.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
