
AVRASM ver. 2.1.30  C:\Users\Myx\Documents\avr\Debug\List\test2.asm Tue Dec 19 08:44:17 2023

C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R4
                 	.DEF _a_msb=R5
                 	.DEF _b=R6
                 	.DEF _b_msb=R7
                 	.DEF _key=R8
                 	.DEF _key_msb=R9
                 	.DEF _flag=R10
                 	.DEF _flag_msb=R11
                 	.DEF _flag2=R12
                 	.DEF _flag2_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0042 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0014
000036 0000      	.DB  0x14,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x0:
000038 6425
C:\Users\Myx\Documents\avr\Debug\List\test2.asm(1141): warning: .cseg .db misalignment - padding zero byte
000039 0000      	.DB  0x25,0x64,0x0
                 _0x2000003:
00003a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003b 000a      	.DW  0x0A
00003c 0004      	.DW  0x04
00003d 0066      	.DW  __REG_VARS*2
                 
00003e 0002      	.DW  0x02
00003f 0272      	.DW  __base_y_G100
000040 0074      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000041 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000042 94f8      	CLI
000043 27ee      	CLR  R30
000044 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000045 e0f1      	LDI  R31,1
000046 bffb      	OUT  GICR,R31
000047 bfeb      	OUT  GICR,R30
000048 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000049 e08d      	LDI  R24,(14-2)+1
00004a e0a2      	LDI  R26,2
00004b 27bb      	CLR  R27
                 __CLEAR_REG:
00004c 93ed      	ST   X+,R30
00004d 958a      	DEC  R24
00004e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000050 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000051 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000052 93ed      	ST   X+,R30
000053 9701      	SBIW R24,1
000054 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000055 e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000056 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000057 9185      	LPM  R24,Z+
000058 9195      	LPM  R25,Z+
000059 9700      	SBIW R24,0
00005a f061      	BREQ __GLOBAL_INI_END
00005b 91a5      	LPM  R26,Z+
00005c 91b5      	LPM  R27,Z+
00005d 9005      	LPM  R0,Z+
00005e 9015      	LPM  R1,Z+
00005f 01bf      	MOVW R22,R30
000060 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000061 9005      	LPM  R0,Z+
000062 920d      	ST   X+,R0
000063 9701      	SBIW R24,1
000064 f7e1      	BRNE __GLOBAL_INI_LOOP
000065 01fb      	MOVW R30,R22
000066 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000067 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000068 bfed      	OUT  SPL,R30
000069 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006d 940c 006f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void keypad(void);
                 ;int numGet(void);
                 ;
                 ;int a=0 , b=0 , key=20, flag=0, flag2=0 , num;
                 ;unsigned char c[16];
                 ;void main(void){
                 ; 0000 000C void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000D DDRB=0xF0;
00006f efe0      	LDI  R30,LOW(240)
000070 bbe7      	OUT  0x17,R30
                 ; 0000 000E DDRA=0xFF;
000071 efef      	LDI  R30,LOW(255)
000072 bbea      	OUT  0x1A,R30
                 ; 0000 000F lcd_init(16);
000073 e1a0      	LDI  R26,LOW(16)
000074 d183      	RCALL _lcd_init
                 ; 0000 0010 a= numGet();
000075 d0d6      	RCALL _numGet
000076 012f      	MOVW R4,R30
                 ; 0000 0011 delay_ms(50);
000077 e3a2      	LDI  R26,LOW(50)
000078 e0b0      	LDI  R27,0
000079 940e 043b 	CALL _delay_ms
                 ; 0000 0012 flag2=flag;
00007b 0165      	MOVW R12,R10
                 ; 0000 0013 b=numGet();
00007c d0cf      	RCALL _numGet
00007d 013f      	MOVW R6,R30
                 ; 0000 0014 delay_ms(50);
00007e e3a2      	LDI  R26,LOW(50)
00007f e0b0      	LDI  R27,0
000080 940e 043b 	CALL _delay_ms
                 ; 0000 0015 
                 ; 0000 0016 
                 ; 0000 0017 while(flag==5){
                 _0x3:
000082 e0e5      	LDI  R30,LOW(5)
000083 e0f0      	LDI  R31,HIGH(5)
000084 15ea      	CP   R30,R10
000085 05fb      	CPC  R31,R11
000086 f009      	BREQ PC+2
000087 c04a      	RJMP _0x5
                 ; 0000 0018     lcd_gotoxy(1,1);
000088 e0e1      	LDI  R30,LOW(1)
000089 93ea      	ST   -Y,R30
00008a e0a1      	LDI  R26,LOW(1)
00008b d11c      	RCALL _lcd_gotoxy
                 ; 0000 0019     if(flag2==4)
00008c e0e4      	LDI  R30,LOW(4)
00008d e0f0      	LDI  R31,HIGH(4)
00008e 15ec      	CP   R30,R12
00008f 05fd      	CPC  R31,R13
000090 f441      	BRNE _0x6
                 ; 0000 001A         sprintf(c,"%d",a+b);
000091 940e 03e8 	CALL SUBOPT_0x0
000093 01f3      	MOVW R30,R6
000094 0de4      	ADD  R30,R4
000095 1df5      	ADC  R31,R5
000096 940e 04f7 	CALL __CWD1
000098 c030      	RJMP _0x32
                 ; 0000 001B     else if(flag2==3)
                 _0x6:
000099 e0e3      	LDI  R30,LOW(3)
00009a e0f0      	LDI  R31,HIGH(3)
00009b 15ec      	CP   R30,R12
00009c 05fd      	CPC  R31,R13
00009d f441      	BRNE _0x8
                 ; 0000 001C         sprintf(c,"%d",a-b);
00009e 940e 03e8 	CALL SUBOPT_0x0
0000a0 01f2      	MOVW R30,R4
0000a1 19e6      	SUB  R30,R6
0000a2 09f7      	SBC  R31,R7
0000a3 940e 04f7 	CALL __CWD1
0000a5 c023      	RJMP _0x32
                 ; 0000 001D     else if(flag2==2)
                 _0x8:
0000a6 e0e2      	LDI  R30,LOW(2)
0000a7 e0f0      	LDI  R31,HIGH(2)
0000a8 15ec      	CP   R30,R12
0000a9 05fd      	CPC  R31,R13
0000aa f449      	BRNE _0xA
                 ; 0000 001E         sprintf(c,"%d",a*b);
0000ab 940e 03e8 	CALL SUBOPT_0x0
0000ad 01f3      	MOVW R30,R6
0000ae 01d2      	MOVW R26,R4
0000af 940e 0504 	CALL __MULW12
0000b1 940e 04f7 	CALL __CWD1
0000b3 c015      	RJMP _0x32
                 ; 0000 001F     else if(flag2==1)
                 _0xA:
0000b4 e0e1      	LDI  R30,LOW(1)
0000b5 e0f0      	LDI  R31,HIGH(1)
0000b6 15ec      	CP   R30,R12
0000b7 05fd      	CPC  R31,R13
0000b8 f4b1      	BRNE _0xC
                 ; 0000 0020         sprintf(c,"%d",(float)a/b);
0000b9 940e 03e8 	CALL SUBOPT_0x0
0000bb 01f2      	MOVW R30,R4
0000bc 940e 04f7 	CALL __CWD1
0000be 940e 0474 	CALL __CDF1
0000c0 01df      	MOVW R26,R30
0000c1 01cb      	MOVW R24,R22
0000c2 01f3      	MOVW R30,R6
0000c3 940e 04f7 	CALL __CWD1
0000c5 940e 0474 	CALL __CDF1
0000c7 940e 04a2 	CALL __DIVF21
                 _0x32:
0000c9 940e 0537 	CALL __PUTPARD1
0000cb e084      	LDI  R24,4
0000cc 940e 039b 	CALL _sprintf
0000ce 9628      	ADIW R28,8
                 ; 0000 0021     lcd_puts(c);
                 _0xC:
0000cf 940e 03f1 	CALL SUBOPT_0x1
                 ; 0000 0022     delay_ms(30);
                 ; 0000 0023 }
0000d1 cfb0      	RJMP _0x3
                 _0x5:
                 ; 0000 0024 }
                 _0xD:
0000d2 cfff      	RJMP _0xD
                 ; .FEND
                 ;void keypad(void)
                 ; 0000 0026 {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0027 key=20;
0000d3 e1e4      	LDI  R30,LOW(20)
0000d4 e0f0      	LDI  R31,HIGH(20)
0000d5 014f      	MOVW R8,R30
                 ; 0000 0028 PORTB=0xFF;
0000d6 efef      	LDI  R30,LOW(255)
0000d7 bbe8      	OUT  0x18,R30
                 ; 0000 0029 //---- ROW1 ----
                 ; 0000 002A PORTB.4=0;
0000d8 98c4      	CBI  0x18,4
                 ; 0000 002B delay_ms(2);
0000d9 940e 03f9 	CALL SUBOPT_0x2
                 ; 0000 002C if(PINB.0==0) key=7;
0000db 99b0      	SBIC 0x16,0
0000dc c003      	RJMP _0x10
0000dd e0e7      	LDI  R30,LOW(7)
0000de e0f0      	LDI  R31,HIGH(7)
0000df 014f      	MOVW R8,R30
                 ; 0000 002D if(PINB.1==0) key=4;
                 _0x10:
0000e0 99b1      	SBIC 0x16,1
0000e1 c003      	RJMP _0x11
0000e2 e0e4      	LDI  R30,LOW(4)
0000e3 e0f0      	LDI  R31,HIGH(4)
0000e4 014f      	MOVW R8,R30
                 ; 0000 002E if(PINB.2==0) key=1;
                 _0x11:
0000e5 99b2      	SBIC 0x16,2
0000e6 c003      	RJMP _0x12
0000e7 e0e1      	LDI  R30,LOW(1)
0000e8 e0f0      	LDI  R31,HIGH(1)
0000e9 014f      	MOVW R8,R30
                 ; 0000 002F if(PINB.3==0) {lcd_clear(); flag = 0;}
                 _0x12:
0000ea 99b3      	SBIC 0x16,3
0000eb c003      	RJMP _0x13
0000ec d0cc      	RCALL _lcd_clear
0000ed 24aa      	CLR  R10
0000ee 24bb      	CLR  R11
                 ; 0000 0030 PORTB.4=1;
                 _0x13:
0000ef 9ac4      	SBI  0x18,4
                 ; 0000 0031 //---- ROW2 ----
                 ; 0000 0032 PORTB.5=0;
0000f0 98c5      	CBI  0x18,5
                 ; 0000 0033 delay_ms(2);
0000f1 940e 03f9 	CALL SUBOPT_0x2
                 ; 0000 0034 if(PINB.0==0) key=8;
0000f3 99b0      	SBIC 0x16,0
0000f4 c003      	RJMP _0x18
0000f5 e0e8      	LDI  R30,LOW(8)
0000f6 e0f0      	LDI  R31,HIGH(8)
0000f7 014f      	MOVW R8,R30
                 ; 0000 0035 if(PINB.1==0) key=5;
                 _0x18:
0000f8 99b1      	SBIC 0x16,1
0000f9 c003      	RJMP _0x19
0000fa e0e5      	LDI  R30,LOW(5)
0000fb e0f0      	LDI  R31,HIGH(5)
0000fc 014f      	MOVW R8,R30
                 ; 0000 0036 if(PINB.2==0) key=2;
                 _0x19:
0000fd 99b2      	SBIC 0x16,2
0000fe c003      	RJMP _0x1A
0000ff e0e2      	LDI  R30,LOW(2)
000100 e0f0      	LDI  R31,HIGH(2)
000101 014f      	MOVW R8,R30
                 ; 0000 0037 if(PINB.3==0) key=0;
                 _0x1A:
000102 99b3      	SBIC 0x16,3
000103 c002      	RJMP _0x1B
000104 2488      	CLR  R8
000105 2499      	CLR  R9
                 ; 0000 0038 PORTB.5=1;
                 _0x1B:
000106 9ac5      	SBI  0x18,5
                 ; 0000 0039 //---- ROW3 ----
                 ; 0000 003A PORTB.6=0;
000107 98c6      	CBI  0x18,6
                 ; 0000 003B delay_ms(2);
000108 940e 03f9 	CALL SUBOPT_0x2
                 ; 0000 003C if(PINB.0==0) key=9;
00010a 99b0      	SBIC 0x16,0
00010b c003      	RJMP _0x20
00010c e0e9      	LDI  R30,LOW(9)
00010d e0f0      	LDI  R31,HIGH(9)
00010e 014f      	MOVW R8,R30
                 ; 0000 003D if(PINB.1==0) key=6;
                 _0x20:
00010f 99b1      	SBIC 0x16,1
000110 c003      	RJMP _0x21
000111 e0e6      	LDI  R30,LOW(6)
000112 e0f0      	LDI  R31,HIGH(6)
000113 014f      	MOVW R8,R30
                 ; 0000 003E if(PINB.2==0) key=3;
                 _0x21:
000114 99b2      	SBIC 0x16,2
000115 c003      	RJMP _0x22
000116 e0e3      	LDI  R30,LOW(3)
000117 e0f0      	LDI  R31,HIGH(3)
000118 014f      	MOVW R8,R30
                 ; 0000 003F if(PINB.3==0) { lcd_putchar('='); flag=5; delay_ms(30); }
                 _0x22:
000119 99b3      	SBIC 0x16,3
00011a c007      	RJMP _0x23
00011b e3ad      	LDI  R26,LOW(61)
00011c d0aa      	RCALL _lcd_putchar
00011d e0e5      	LDI  R30,LOW(5)
00011e e0f0      	LDI  R31,HIGH(5)
00011f 015f      	MOVW R10,R30
000120 940e 03fd 	CALL SUBOPT_0x3
                 ; 0000 0040 PORTB.6=1;
                 _0x23:
000122 9ac6      	SBI  0x18,6
                 ; 0000 0041 //---- ROW4 ----
                 ; 0000 0042 PORTB.7=0;
000123 98c7      	CBI  0x18,7
                 ; 0000 0043 delay_ms(2);
000124 940e 03f9 	CALL SUBOPT_0x2
                 ; 0000 0044 if(PINB.0==0) { lcd_putchar('/'); flag2=1; delay_ms(30); }
000126 99b0      	SBIC 0x16,0
000127 c007      	RJMP _0x28
000128 e2af      	LDI  R26,LOW(47)
000129 d09d      	RCALL _lcd_putchar
00012a e0e1      	LDI  R30,LOW(1)
00012b e0f0      	LDI  R31,HIGH(1)
00012c 016f      	MOVW R12,R30
00012d 940e 03fd 	CALL SUBOPT_0x3
                 ; 0000 0045 if(PINB.1==0) { lcd_putchar('*'); flag2=2;delay_ms(30); }
                 _0x28:
00012f 99b1      	SBIC 0x16,1
000130 c007      	RJMP _0x29
000131 e2aa      	LDI  R26,LOW(42)
000132 d094      	RCALL _lcd_putchar
000133 e0e2      	LDI  R30,LOW(2)
000134 e0f0      	LDI  R31,HIGH(2)
000135 016f      	MOVW R12,R30
000136 940e 03fd 	CALL SUBOPT_0x3
                 ; 0000 0046 if(PINB.2==0) { lcd_putchar('-'); flag2=3; delay_ms(30); }
                 _0x29:
000138 99b2      	SBIC 0x16,2
000139 c007      	RJMP _0x2A
00013a e2ad      	LDI  R26,LOW(45)
00013b d08b      	RCALL _lcd_putchar
00013c e0e3      	LDI  R30,LOW(3)
00013d e0f0      	LDI  R31,HIGH(3)
00013e 016f      	MOVW R12,R30
00013f 940e 03fd 	CALL SUBOPT_0x3
                 ; 0000 0047 if(PINB.3==0) { lcd_putchar('+'); flag2=4; delay_ms(30); }
                 _0x2A:
000141 99b3      	SBIC 0x16,3
000142 c007      	RJMP _0x2B
000143 e2ab      	LDI  R26,LOW(43)
000144 d082      	RCALL _lcd_putchar
000145 e0e4      	LDI  R30,LOW(4)
000146 e0f0      	LDI  R31,HIGH(4)
000147 016f      	MOVW R12,R30
000148 940e 03fd 	CALL SUBOPT_0x3
                 ; 0000 0048 PORTB.7=1;
                 _0x2B:
00014a 9ac7      	SBI  0x18,7
                 ; 0000 0049 }
00014b 9508      	RET
                 ; .FEND
                 ;
                 ;int numGet(void)
                 ; 0000 004C {
                 _numGet:
                 ; .FSTART _numGet
                 ; 0000 004D     flag=0;
00014c 24aa      	CLR  R10
00014d 24bb      	CLR  R11
                 ; 0000 004E     num=0;
00014e e0e0      	LDI  R30,LOW(0)
00014f 93e0 0260 	STS  _num,R30
000151 93e0 0261 	STS  _num+1,R30
                 ; 0000 004F     while(flag<1){
                 _0x2E:
000153 e0e1      	LDI  R30,LOW(1)
000154 e0f0      	LDI  R31,HIGH(1)
000155 16ae      	CP   R10,R30
000156 06bf      	CPC  R11,R31
000157 f53c      	BRGE _0x30
                 ; 0000 0050         keypad();
000158 df7a      	RCALL _keypad
                 ; 0000 0051         if(key!=20){
000159 e1e4      	LDI  R30,LOW(20)
00015a e0f0      	LDI  R31,HIGH(20)
00015b 15e8      	CP   R30,R8
00015c 05f9      	CPC  R31,R9
00015d f101      	BREQ _0x31
                 ; 0000 0052             sprintf(c,"%d",key);
00015e 940e 03e8 	CALL SUBOPT_0x0
000160 01f4      	MOVW R30,R8
000161 940e 04f7 	CALL __CWD1
000163 940e 0537 	CALL __PUTPARD1
000165 e084      	LDI  R24,4
000166 940e 039b 	CALL _sprintf
000168 9628      	ADIW R28,8
                 ; 0000 0053             lcd_puts(c);
000169 940e 03f1 	CALL SUBOPT_0x1
                 ; 0000 0054             delay_ms(30);
                 ; 0000 0055             num+=key;
00016b 01f4      	MOVW R30,R8
00016c 91a0 0260 	LDS  R26,_num
00016e 91b0 0261 	LDS  R27,_num+1
000170 0fea      	ADD  R30,R26
000171 1ffb      	ADC  R31,R27
000172 93e0 0260 	STS  _num,R30
000174 93f0 0261 	STS  _num+1,R31
                 ; 0000 0056             num*=10;
000176 e0aa      	LDI  R26,LOW(10)
000177 e0b0      	LDI  R27,HIGH(10)
000178 940e 0504 	CALL __MULW12
00017a 93e0 0260 	STS  _num,R30
00017c 93f0 0261 	STS  _num+1,R31
                 ; 0000 0057         }
                 ; 0000 0058     }
                 _0x31:
00017e cfd4      	RJMP _0x2E
                 _0x30:
                 ; 0000 0059     return num/10;
00017f 91a0 0260 	LDS  R26,_num
000181 91b0 0261 	LDS  R27,_num+1
000183 e0ea      	LDI  R30,LOW(10)
000184 e0f0      	LDI  R31,HIGH(10)
000185 940e 051c 	CALL __DIVW21
000187 9508      	RET
                 ; 0000 005A }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000188 93aa      	ST   -Y,R26
000189 b3eb      	IN   R30,0x1B
00018a 70ef      	ANDI R30,LOW(0xF)
00018b 2fae      	MOV  R26,R30
00018c 81e8      	LD   R30,Y
00018d 7fe0      	ANDI R30,LOW(0xF0)
00018e 2bea      	OR   R30,R26
00018f bbeb      	OUT  0x1B,R30
                +
000190 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000191 958a     +DEC R24
000192 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000193 9ada      	SBI  0x1B,2
                +
000194 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000195 958a     +DEC R24
000196 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000197 98da      	CBI  0x1B,2
                +
000198 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000199 958a     +DEC R24
00019a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00019b c089      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00019c 93aa      	ST   -Y,R26
00019d 81a8      	LD   R26,Y
00019e dfe9      	RCALL __lcd_write_nibble_G100
00019f 81e8          ld    r30,y
0001a0 95e2          swap  r30
0001a1 83e8          st    y,r30
0001a2 81a8      	LD   R26,Y
0001a3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001a4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001a7 c07d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001a8 93aa      	ST   -Y,R26
0001a9 81e8      	LD   R30,Y
0001aa e0f0      	LDI  R31,0
0001ab 58ee      	SUBI R30,LOW(-__base_y_G100)
0001ac 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001ad 81e0      	LD   R30,Z
0001ae 81a9      	LDD  R26,Y+1
0001af 0fae      	ADD  R26,R30
0001b0 dfeb      	RCALL __lcd_write_data
0001b1 81e9      	LDD  R30,Y+1
0001b2 93e0 0276 	STS  __lcd_x,R30
0001b4 81e8      	LD   R30,Y
0001b5 93e0 0277 	STS  __lcd_y,R30
0001b7 9622      	ADIW R28,2
0001b8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b9 e0a2      	LDI  R26,LOW(2)
0001ba 940e 0401 	CALL SUBOPT_0x4
0001bc e0ac      	LDI  R26,LOW(12)
0001bd dfde      	RCALL __lcd_write_data
0001be e0a1      	LDI  R26,LOW(1)
0001bf 940e 0401 	CALL SUBOPT_0x4
0001c1 e0e0      	LDI  R30,LOW(0)
0001c2 93e0 0277 	STS  __lcd_y,R30
0001c4 93e0 0276 	STS  __lcd_x,R30
0001c6 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001c7 93aa      	ST   -Y,R26
0001c8 81a8      	LD   R26,Y
0001c9 30aa      	CPI  R26,LOW(0xA)
0001ca f031      	BREQ _0x2000005
0001cb 91e0 0278 	LDS  R30,__lcd_maxx
0001cd 91a0 0276 	LDS  R26,__lcd_x
0001cf 17ae      	CP   R26,R30
0001d0 f060      	BRLO _0x2000004
                 _0x2000005:
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 93ea      	ST   -Y,R30
0001d3 91a0 0277 	LDS  R26,__lcd_y
0001d5 5faf      	SUBI R26,-LOW(1)
0001d6 93a0 0277 	STS  __lcd_y,R26
0001d8 dfcf      	RCALL _lcd_gotoxy
0001d9 81a8      	LD   R26,Y
0001da 30aa      	CPI  R26,LOW(0xA)
0001db f409      	BRNE _0x2000007
0001dc c048      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001dd 91e0 0276 	LDS  R30,__lcd_x
0001df 5fef      	SUBI R30,-LOW(1)
0001e0 93e0 0276 	STS  __lcd_x,R30
0001e2 9ad8      	SBI  0x1B,0
0001e3 81a8      	LD   R26,Y
0001e4 dfb7      	RCALL __lcd_write_data
0001e5 98d8      	CBI  0x1B,0
0001e6 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001e7 93ba      	ST   -Y,R27
0001e8 93aa      	ST   -Y,R26
0001e9 931a      	ST   -Y,R17
                 _0x2000008:
0001ea 81a9      	LDD  R26,Y+1
0001eb 81ba      	LDD  R27,Y+1+1
0001ec 91ed      	LD   R30,X+
0001ed 83a9      	STD  Y+1,R26
0001ee 83ba      	STD  Y+1+1,R27
0001ef 2f1e      	MOV  R17,R30
0001f0 30e0      	CPI  R30,0
0001f1 f019      	BREQ _0x200000A
0001f2 2fa1      	MOV  R26,R17
0001f3 dfd3      	RCALL _lcd_putchar
0001f4 cff5      	RJMP _0x2000008
                 _0x200000A:
0001f5 8118      	LDD  R17,Y+0
0001f6 9623      	ADIW R28,3
0001f7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001f8 93aa      	ST   -Y,R26
0001f9 b3ea      	IN   R30,0x1A
0001fa 6fe0      	ORI  R30,LOW(0xF0)
0001fb bbea      	OUT  0x1A,R30
0001fc 9ad2      	SBI  0x1A,2
0001fd 9ad0      	SBI  0x1A,0
0001fe 9ad1      	SBI  0x1A,1
0001ff 98da      	CBI  0x1B,2
000200 98d8      	CBI  0x1B,0
000201 98d9      	CBI  0x1B,1
000202 81e8      	LD   R30,Y
000203 93e0 0278 	STS  __lcd_maxx,R30
000205 58e0      	SUBI R30,-LOW(128)
                +
000206 93e0 0274+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000208 81e8      	LD   R30,Y
000209 54e0      	SUBI R30,-LOW(192)
                +
00020a 93e0 0275+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00020c e1a4      	LDI  R26,LOW(20)
00020d e0b0      	LDI  R27,0
00020e 940e 043b 	CALL _delay_ms
000210 940e 0407 	CALL SUBOPT_0x5
000212 940e 0407 	CALL SUBOPT_0x5
000214 940e 0407 	CALL SUBOPT_0x5
000216 e2a0      	LDI  R26,LOW(32)
000217 df70      	RCALL __lcd_write_nibble_G100
                +
000218 ec88     +LDI R24 , LOW ( 200 )
000219 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00021a 9701     +SBIW R24 , 1
00021b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00021c e2a8      	LDI  R26,LOW(40)
00021d df7e      	RCALL __lcd_write_data
00021e e0a4      	LDI  R26,LOW(4)
00021f df7c      	RCALL __lcd_write_data
000220 e8a5      	LDI  R26,LOW(133)
000221 df7a      	RCALL __lcd_write_data
000222 e0a6      	LDI  R26,LOW(6)
000223 df78      	RCALL __lcd_write_data
000224 df94      	RCALL _lcd_clear
                 _0x2080002:
000225 9621      	ADIW R28,1
000226 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000227 93ba      	ST   -Y,R27
000228 93aa      	ST   -Y,R26
000229 931a      	ST   -Y,R17
00022a 930a      	ST   -Y,R16
00022b 81aa      	LDD  R26,Y+2
00022c 81bb      	LDD  R27,Y+2+1
00022d 9612      	ADIW R26,2
00022e 940e 052f 	CALL __GETW1P
000230 9730      	SBIW R30,0
000231 f159      	BREQ _0x2020010
000232 81aa      	LDD  R26,Y+2
000233 81bb      	LDD  R27,Y+2+1
000234 9614      	ADIW R26,4
000235 940e 052f 	CALL __GETW1P
000237 018f      	MOVW R16,R30
000238 9730      	SBIW R30,0
000239 f061      	BREQ _0x2020012
                +
00023a 3002     +CPI R16 , LOW ( 2 )
00023b e0e0     +LDI R30 , HIGH ( 2 )
00023c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00023d f098      	BRLO _0x2020013
00023e 01f8      	MOVW R30,R16
00023f 9731      	SBIW R30,1
000240 018f      	MOVW R16,R30
                +
000241 81aa     +LDD R26 , Y + 2
000242 81bb     +LDD R27 , Y + 2 + 1
000243 9614     +ADIW R26 , 4
000244 93ed     +ST X + , R30
000245 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000246 81aa      	LDD  R26,Y+2
000247 81bb      	LDD  R27,Y+2+1
000248 9612      	ADIW R26,2
000249 91ed      	LD   R30,X+
00024a 91fd      	LD   R31,X+
00024b 9631      	ADIW R30,1
00024c 93fe      	ST   -X,R31
00024d 93ee      	ST   -X,R30
00024e 9731      	SBIW R30,1
00024f 81ac      	LDD  R26,Y+4
000250 83a0      	STD  Z+0,R26
                 _0x2020013:
000251 81aa      	LDD  R26,Y+2
000252 81bb      	LDD  R27,Y+2+1
000253 940e 052f 	CALL __GETW1P
000255 23ff      	TST  R31
000256 f02a      	BRMI _0x2020014
000257 91ed      	LD   R30,X+
000258 91fd      	LD   R31,X+
000259 9631      	ADIW R30,1
00025a 93fe      	ST   -X,R31
00025b 93ee      	ST   -X,R30
                 _0x2020014:
00025c c006      	RJMP _0x2020015
                 _0x2020010:
00025d 81aa      	LDD  R26,Y+2
00025e 81bb      	LDD  R27,Y+2+1
00025f efef      	LDI  R30,LOW(65535)
000260 efff      	LDI  R31,HIGH(65535)
000261 93ed      	ST   X+,R30
000262 93fc      	ST   X,R31
                 _0x2020015:
000263 8119      	LDD  R17,Y+1
000264 8108      	LDD  R16,Y+0
000265 9625      	ADIW R28,5
000266 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000267 93ba      	ST   -Y,R27
000268 93aa      	ST   -Y,R26
000269 9726      	SBIW R28,6
00026a 940e 053c 	CALL __SAVELOCR6
00026c e010      	LDI  R17,0
00026d 85ac      	LDD  R26,Y+12
00026e 85bd      	LDD  R27,Y+12+1
00026f e0e0      	LDI  R30,LOW(0)
000270 e0f0      	LDI  R31,HIGH(0)
000271 93ed      	ST   X+,R30
000272 93fc      	ST   X,R31
                 _0x2020016:
000273 89ea      	LDD  R30,Y+18
000274 89fb      	LDD  R31,Y+18+1
000275 9631      	ADIW R30,1
000276 8bea      	STD  Y+18,R30
000277 8bfb      	STD  Y+18+1,R31
000278 9731      	SBIW R30,1
000279 91e4      	LPM  R30,Z
00027a 2f2e      	MOV  R18,R30
00027b 30e0      	CPI  R30,0
00027c f409      	BRNE PC+2
00027d c115      	RJMP _0x2020018
00027e 2fe1      	MOV  R30,R17
00027f 30e0      	CPI  R30,0
000280 f439      	BRNE _0x202001C
000281 3225      	CPI  R18,37
000282 f411      	BRNE _0x202001D
000283 e011      	LDI  R17,LOW(1)
000284 c002      	RJMP _0x202001E
                 _0x202001D:
000285 940e 040f 	CALL SUBOPT_0x6
                 _0x202001E:
000287 c10a      	RJMP _0x202001B
                 _0x202001C:
000288 30e1      	CPI  R30,LOW(0x1)
000289 f4a9      	BRNE _0x202001F
00028a 3225      	CPI  R18,37
00028b f419      	BRNE _0x2020020
00028c 940e 040f 	CALL SUBOPT_0x6
00028e c102      	RJMP _0x20200CC
                 _0x2020020:
00028f e012      	LDI  R17,LOW(2)
000290 e040      	LDI  R20,LOW(0)
000291 e000      	LDI  R16,LOW(0)
000292 322d      	CPI  R18,45
000293 f411      	BRNE _0x2020021
000294 e001      	LDI  R16,LOW(1)
000295 c0fc      	RJMP _0x202001B
                 _0x2020021:
000296 322b      	CPI  R18,43
000297 f411      	BRNE _0x2020022
000298 e24b      	LDI  R20,LOW(43)
000299 c0f8      	RJMP _0x202001B
                 _0x2020022:
00029a 3220      	CPI  R18,32
00029b f411      	BRNE _0x2020023
00029c e240      	LDI  R20,LOW(32)
00029d c0f4      	RJMP _0x202001B
                 _0x2020023:
00029e c002      	RJMP _0x2020024
                 _0x202001F:
00029f 30e2      	CPI  R30,LOW(0x2)
0002a0 f439      	BRNE _0x2020025
                 _0x2020024:
0002a1 e050      	LDI  R21,LOW(0)
0002a2 e013      	LDI  R17,LOW(3)
0002a3 3320      	CPI  R18,48
0002a4 f411      	BRNE _0x2020026
0002a5 6800      	ORI  R16,LOW(128)
0002a6 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002a7 c003      	RJMP _0x2020027
                 _0x2020025:
0002a8 30e3      	CPI  R30,LOW(0x3)
0002a9 f009      	BREQ PC+2
0002aa c0e7      	RJMP _0x202001B
                 _0x2020027:
0002ab 3320      	CPI  R18,48
0002ac f010      	BRLO _0x202002A
0002ad 332a      	CPI  R18,58
0002ae f008      	BRLO _0x202002B
                 _0x202002A:
0002af c007      	RJMP _0x2020029
                 _0x202002B:
0002b0 e0aa      	LDI  R26,LOW(10)
0002b1 9f5a      	MUL  R21,R26
0002b2 2d50      	MOV  R21,R0
0002b3 2fe2      	MOV  R30,R18
0002b4 53e0      	SUBI R30,LOW(48)
0002b5 0f5e      	ADD  R21,R30
0002b6 c0db      	RJMP _0x202001B
                 _0x2020029:
0002b7 2fe2      	MOV  R30,R18
0002b8 36e3      	CPI  R30,LOW(0x63)
0002b9 f449      	BRNE _0x202002F
0002ba 940e 0416 	CALL SUBOPT_0x7
0002bc 89e8      	LDD  R30,Y+16
0002bd 89f9      	LDD  R31,Y+16+1
0002be 81a4      	LDD  R26,Z+4
0002bf 93aa      	ST   -Y,R26
0002c0 940e 041c 	CALL SUBOPT_0x8
0002c2 c0ce      	RJMP _0x2020030
                 _0x202002F:
0002c3 37e3      	CPI  R30,LOW(0x73)
0002c4 f441      	BRNE _0x2020032
0002c5 940e 0416 	CALL SUBOPT_0x7
0002c7 940e 0422 	CALL SUBOPT_0x9
0002c9 940e 03cf 	CALL _strlen
0002cb 2f1e      	MOV  R17,R30
0002cc c00a      	RJMP _0x2020033
                 _0x2020032:
0002cd 37e0      	CPI  R30,LOW(0x70)
0002ce f461      	BRNE _0x2020035
0002cf 940e 0416 	CALL SUBOPT_0x7
0002d1 940e 0422 	CALL SUBOPT_0x9
0002d3 940e 03db 	CALL _strlenf
0002d5 2f1e      	MOV  R17,R30
0002d6 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002d7 6002      	ORI  R16,LOW(2)
0002d8 770f      	ANDI R16,LOW(127)
0002d9 e030      	LDI  R19,LOW(0)
0002da c034      	RJMP _0x2020036
                 _0x2020035:
0002db 36e4      	CPI  R30,LOW(0x64)
0002dc f011      	BREQ _0x2020039
0002dd 36e9      	CPI  R30,LOW(0x69)
0002de f411      	BRNE _0x202003A
                 _0x2020039:
0002df 6004      	ORI  R16,LOW(4)
0002e0 c002      	RJMP _0x202003B
                 _0x202003A:
0002e1 37e5      	CPI  R30,LOW(0x75)
0002e2 f431      	BRNE _0x202003C
                 _0x202003B:
0002e3 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002e4 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002e5 83ee      	STD  Y+6,R30
0002e6 83ff      	STD  Y+6+1,R31
0002e7 e015      	LDI  R17,LOW(5)
0002e8 c00c      	RJMP _0x202003D
                 _0x202003C:
0002e9 35e8      	CPI  R30,LOW(0x58)
0002ea f411      	BRNE _0x202003F
0002eb 6008      	ORI  R16,LOW(8)
0002ec c003      	RJMP _0x2020040
                 _0x202003F:
0002ed 37e8      	CPI  R30,LOW(0x78)
0002ee f009      	BREQ PC+2
0002ef c0a1      	RJMP _0x2020071
                 _0x2020040:
0002f0 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002f1 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002f2 83ee      	STD  Y+6,R30
0002f3 83ff      	STD  Y+6+1,R31
0002f4 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002f5 ff02      	SBRS R16,2
0002f6 c014      	RJMP _0x2020042
0002f7 940e 0416 	CALL SUBOPT_0x7
0002f9 940e 042c 	CALL SUBOPT_0xA
0002fb 85ab      	LDD  R26,Y+11
0002fc 23aa      	TST  R26
0002fd f43a      	BRPL _0x2020043
0002fe 85ea      	LDD  R30,Y+10
0002ff 85fb      	LDD  R31,Y+10+1
000300 940e 04eb 	CALL __ANEGW1
000302 87ea      	STD  Y+10,R30
000303 87fb      	STD  Y+10+1,R31
000304 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000305 3040      	CPI  R20,0
000306 f011      	BREQ _0x2020044
000307 5f1f      	SUBI R17,-LOW(1)
000308 c001      	RJMP _0x2020045
                 _0x2020044:
000309 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00030a c004      	RJMP _0x2020046
                 _0x2020042:
00030b 940e 0416 	CALL SUBOPT_0x7
00030d 940e 042c 	CALL SUBOPT_0xA
                 _0x2020046:
                 _0x2020036:
00030f fd00      	SBRC R16,0
000310 c011      	RJMP _0x2020047
                 _0x2020048:
000311 1715      	CP   R17,R21
000312 f478      	BRSH _0x202004A
000313 ff07      	SBRS R16,7
000314 c008      	RJMP _0x202004B
000315 ff02      	SBRS R16,2
000316 c004      	RJMP _0x202004C
000317 7f0b      	ANDI R16,LOW(251)
000318 2f24      	MOV  R18,R20
000319 5011      	SUBI R17,LOW(1)
00031a c001      	RJMP _0x202004D
                 _0x202004C:
00031b e320      	LDI  R18,LOW(48)
                 _0x202004D:
00031c c001      	RJMP _0x202004E
                 _0x202004B:
00031d e220      	LDI  R18,LOW(32)
                 _0x202004E:
00031e 940e 040f 	CALL SUBOPT_0x6
000320 5051      	SUBI R21,LOW(1)
000321 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000322 2f31      	MOV  R19,R17
000323 ff01      	SBRS R16,1
000324 c017      	RJMP _0x202004F
                 _0x2020050:
000325 3030      	CPI  R19,0
000326 f0a1      	BREQ _0x2020052
000327 ff03      	SBRS R16,3
000328 c006      	RJMP _0x2020053
000329 81ee      	LDD  R30,Y+6
00032a 81ff      	LDD  R31,Y+6+1
00032b 9125      	LPM  R18,Z+
00032c 83ee      	STD  Y+6,R30
00032d 83ff      	STD  Y+6+1,R31
00032e c005      	RJMP _0x2020054
                 _0x2020053:
00032f 81ae      	LDD  R26,Y+6
000330 81bf      	LDD  R27,Y+6+1
000331 912d      	LD   R18,X+
000332 83ae      	STD  Y+6,R26
000333 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000334 940e 040f 	CALL SUBOPT_0x6
000336 3050      	CPI  R21,0
000337 f009      	BREQ _0x2020055
000338 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000339 5031      	SUBI R19,LOW(1)
00033a cfea      	RJMP _0x2020050
                 _0x2020052:
00033b c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00033c e320      	LDI  R18,LOW(48)
00033d 81ee      	LDD  R30,Y+6
00033e 81ff      	LDD  R31,Y+6+1
00033f 940e 0533 	CALL __GETW1PF
000341 87e8      	STD  Y+8,R30
000342 87f9      	STD  Y+8+1,R31
000343 81ee      	LDD  R30,Y+6
000344 81ff      	LDD  R31,Y+6+1
000345 9632      	ADIW R30,2
000346 83ee      	STD  Y+6,R30
000347 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000348 85e8      	LDD  R30,Y+8
000349 85f9      	LDD  R31,Y+8+1
00034a 85aa      	LDD  R26,Y+10
00034b 85bb      	LDD  R27,Y+10+1
00034c 17ae      	CP   R26,R30
00034d 07bf      	CPC  R27,R31
00034e f050      	BRLO _0x202005C
00034f 5f2f      	SUBI R18,-LOW(1)
000350 85a8      	LDD  R26,Y+8
000351 85b9      	LDD  R27,Y+8+1
000352 85ea      	LDD  R30,Y+10
000353 85fb      	LDD  R31,Y+10+1
000354 1bea      	SUB  R30,R26
000355 0bfb      	SBC  R31,R27
000356 87ea      	STD  Y+10,R30
000357 87fb      	STD  Y+10+1,R31
000358 cfef      	RJMP _0x202005A
                 _0x202005C:
000359 332a      	CPI  R18,58
00035a f028      	BRLO _0x202005D
00035b ff03      	SBRS R16,3
00035c c002      	RJMP _0x202005E
00035d 5f29      	SUBI R18,-LOW(7)
00035e c001      	RJMP _0x202005F
                 _0x202005E:
00035f 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000360 fd04      	SBRC R16,4
000361 c01a      	RJMP _0x2020061
000362 3321      	CPI  R18,49
000363 f420      	BRSH _0x2020063
000364 85a8      	LDD  R26,Y+8
000365 85b9      	LDD  R27,Y+8+1
000366 9711      	SBIW R26,1
000367 f409      	BRNE _0x2020062
                 _0x2020063:
000368 c009      	RJMP _0x20200CD
                 _0x2020062:
000369 1753      	CP   R21,R19
00036a f010      	BRLO _0x2020067
00036b ff00      	SBRS R16,0
00036c c001      	RJMP _0x2020068
                 _0x2020067:
00036d c013      	RJMP _0x2020066
                 _0x2020068:
00036e e220      	LDI  R18,LOW(32)
00036f ff07      	SBRS R16,7
000370 c00b      	RJMP _0x2020069
000371 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000372 6100      	ORI  R16,LOW(16)
000373 ff02      	SBRS R16,2
000374 c007      	RJMP _0x202006A
000375 7f0b      	ANDI R16,LOW(251)
000376 934a      	ST   -Y,R20
000377 940e 041c 	CALL SUBOPT_0x8
000379 3050      	CPI  R21,0
00037a f009      	BREQ _0x202006B
00037b 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00037c 940e 040f 	CALL SUBOPT_0x6
00037e 3050      	CPI  R21,0
00037f f009      	BREQ _0x202006C
000380 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000381 5031      	SUBI R19,LOW(1)
000382 85a8      	LDD  R26,Y+8
000383 85b9      	LDD  R27,Y+8+1
000384 9712      	SBIW R26,2
000385 f008      	BRLO _0x2020059
000386 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000387 ff00      	SBRS R16,0
000388 c008      	RJMP _0x202006D
                 _0x202006E:
000389 3050      	CPI  R21,0
00038a f031      	BREQ _0x2020070
00038b 5051      	SUBI R21,LOW(1)
00038c e2e0      	LDI  R30,LOW(32)
00038d 93ea      	ST   -Y,R30
00038e 940e 041c 	CALL SUBOPT_0x8
000390 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000391 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000392 cee0      	RJMP _0x2020016
                 _0x2020018:
000393 85ac      	LDD  R26,Y+12
000394 85bd      	LDD  R27,Y+12+1
000395 940e 052f 	CALL __GETW1P
000397 940e 0543 	CALL __LOADLOCR6
000399 9664      	ADIW R28,20
00039a 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00039b 92ff      	PUSH R15
00039c 2ef8      	MOV  R15,R24
00039d 9726      	SBIW R28,6
00039e 940e 053e 	CALL __SAVELOCR4
0003a0 940e 0434 	CALL SUBOPT_0xB
0003a2 9730      	SBIW R30,0
0003a3 f419      	BRNE _0x2020072
0003a4 efef      	LDI  R30,LOW(65535)
0003a5 efff      	LDI  R31,HIGH(65535)
0003a6 c023      	RJMP _0x2080001
                 _0x2020072:
0003a7 01de      	MOVW R26,R28
0003a8 9616      	ADIW R26,6
0003a9 940e 04e7 	CALL __ADDW2R15
0003ab 018d      	MOVW R16,R26
0003ac 940e 0434 	CALL SUBOPT_0xB
0003ae 83ee      	STD  Y+6,R30
0003af 83ff      	STD  Y+6+1,R31
0003b0 e0e0      	LDI  R30,LOW(0)
0003b1 87e8      	STD  Y+8,R30
0003b2 87e9      	STD  Y+8+1,R30
0003b3 01de      	MOVW R26,R28
0003b4 961a      	ADIW R26,10
0003b5 940e 04e7 	CALL __ADDW2R15
0003b7 940e 052f 	CALL __GETW1P
0003b9 93fa      	ST   -Y,R31
0003ba 93ea      	ST   -Y,R30
0003bb 931a      	ST   -Y,R17
0003bc 930a      	ST   -Y,R16
0003bd e2e7      	LDI  R30,LOW(_put_buff_G101)
0003be e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003bf 93fa      	ST   -Y,R31
0003c0 93ea      	ST   -Y,R30
0003c1 01de      	MOVW R26,R28
0003c2 961a      	ADIW R26,10
0003c3 dea3      	RCALL __print_G101
0003c4 019f      	MOVW R18,R30
0003c5 81ae      	LDD  R26,Y+6
0003c6 81bf      	LDD  R27,Y+6+1
0003c7 e0e0      	LDI  R30,LOW(0)
0003c8 93ec      	ST   X,R30
0003c9 01f9      	MOVW R30,R18
                 _0x2080001:
0003ca 940e 0545 	CALL __LOADLOCR4
0003cc 962a      	ADIW R28,10
0003cd 90ff      	POP  R15
0003ce 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003cf 93ba      	ST   -Y,R27
0003d0 93aa      	ST   -Y,R26
0003d1 91a9          ld   r26,y+
0003d2 91b9          ld   r27,y+
0003d3 27ee          clr  r30
0003d4 27ff          clr  r31
                 strlen0:
0003d5 916d          ld   r22,x+
0003d6 2366          tst  r22
0003d7 f011          breq strlen1
0003d8 9631          adiw r30,1
0003d9 cffb          rjmp strlen0
                 strlen1:
0003da 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003db 93ba      	ST   -Y,R27
0003dc 93aa      	ST   -Y,R26
0003dd 27aa          clr  r26
0003de 27bb          clr  r27
0003df 91e9          ld   r30,y+
0003e0 91f9          ld   r31,y+
                 strlenf0:
0003e1 9005      	lpm  r0,z+
0003e2 2000          tst  r0
0003e3 f011          breq strlenf1
0003e4 9611          adiw r26,1
0003e5 cffb          rjmp strlenf0
                 strlenf1:
0003e6 01fd          movw r30,r26
0003e7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _num:
000260           	.BYTE 0x2
                 _c:
000262           	.BYTE 0x10
                 __base_y_G100:
000272           	.BYTE 0x4
                 __lcd_x:
000276           	.BYTE 0x1
                 __lcd_y:
000277           	.BYTE 0x1
                 __lcd_maxx:
000278           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x0:
0003e8 e6e2      	LDI  R30,LOW(_c)
0003e9 e0f2      	LDI  R31,HIGH(_c)
0003ea 93fa      	ST   -Y,R31
0003eb 93ea      	ST   -Y,R30
                +
0003ec e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0003ed e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0003ee 93fa      	ST   -Y,R31
0003ef 93ea      	ST   -Y,R30
0003f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0003f1 e6a2      	LDI  R26,LOW(_c)
0003f2 e0b2      	LDI  R27,HIGH(_c)
0003f3 940e 01e7 	CALL _lcd_puts
0003f5 e1ae      	LDI  R26,LOW(30)
0003f6 e0b0      	LDI  R27,0
0003f7 940c 043b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003f9 e0a2      	LDI  R26,LOW(2)
0003fa e0b0      	LDI  R27,0
0003fb 940c 043b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003fd e1ae      	LDI  R26,LOW(30)
0003fe e0b0      	LDI  R27,0
0003ff 940c 043b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000401 940e 019c 	CALL __lcd_write_data
000403 e0a3      	LDI  R26,LOW(3)
000404 e0b0      	LDI  R27,0
000405 940c 043b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000407 e3a0      	LDI  R26,LOW(48)
000408 940e 0188 	CALL __lcd_write_nibble_G100
                +
00040a ec88     +LDI R24 , LOW ( 200 )
00040b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00040c 9701     +SBIW R24 , 1
00040d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00040e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
00040f 932a      	ST   -Y,R18
000410 85ad      	LDD  R26,Y+13
000411 85be      	LDD  R27,Y+13+1
000412 85ef      	LDD  R30,Y+15
000413 89f8      	LDD  R31,Y+15+1
000414 9509      	ICALL
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000416 89e8      	LDD  R30,Y+16
000417 89f9      	LDD  R31,Y+16+1
000418 9734      	SBIW R30,4
000419 8be8      	STD  Y+16,R30
00041a 8bf9      	STD  Y+16+1,R31
00041b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00041c 85ad      	LDD  R26,Y+13
00041d 85be      	LDD  R27,Y+13+1
00041e 85ef      	LDD  R30,Y+15
00041f 89f8      	LDD  R31,Y+15+1
000420 9509      	ICALL
000421 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000422 89a8      	LDD  R26,Y+16
000423 89b9      	LDD  R27,Y+16+1
000424 9614      	ADIW R26,4
000425 940e 052f 	CALL __GETW1P
000427 83ee      	STD  Y+6,R30
000428 83ff      	STD  Y+6+1,R31
000429 81ae      	LDD  R26,Y+6
00042a 81bf      	LDD  R27,Y+6+1
00042b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
00042c 89a8      	LDD  R26,Y+16
00042d 89b9      	LDD  R27,Y+16+1
00042e 9614      	ADIW R26,4
00042f 940e 052f 	CALL __GETW1P
000431 87ea      	STD  Y+10,R30
000432 87fb      	STD  Y+10+1,R31
000433 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000434 01de      	MOVW R26,R28
000435 961c      	ADIW R26,12
000436 940e 04e7 	CALL __ADDW2R15
000438 940e 052f 	CALL __GETW1P
00043a 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00043b 9610      	adiw r26,0
00043c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00043d ed80     +LDI R24 , LOW ( 0x7D0 )
00043e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00043f 9701     +SBIW R24 , 1
000440 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000441 95a8      	wdr
000442 9711      	sbiw r26,1
000443 f7c9      	brne __delay_ms0
                 __delay_ms1:
000444 9508      	ret
                 
                 __ROUND_REPACK:
000445 2355      	TST  R21
000446 f442      	BRPL __REPACK
000447 3850      	CPI  R21,0x80
000448 f411      	BRNE __ROUND_REPACK0
000449 ffe0      	SBRS R30,0
00044a c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00044b 9631      	ADIW R30,1
00044c 1f69      	ADC  R22,R25
00044d 1f79      	ADC  R23,R25
00044e f06b      	BRVS __REPACK1
                 
                 __REPACK:
00044f e850      	LDI  R21,0x80
000450 2757      	EOR  R21,R23
000451 f411      	BRNE __REPACK0
000452 935f      	PUSH R21
000453 c03c      	RJMP __ZERORES
                 __REPACK0:
000454 3f5f      	CPI  R21,0xFF
000455 f031      	BREQ __REPACK1
000456 0f66      	LSL  R22
000457 0c00      	LSL  R0
000458 9557      	ROR  R21
000459 9567      	ROR  R22
00045a 2f75      	MOV  R23,R21
00045b 9508      	RET
                 __REPACK1:
00045c 935f      	PUSH R21
00045d 2000      	TST  R0
00045e f00a      	BRMI __REPACK2
00045f c03c      	RJMP __MAXRES
                 __REPACK2:
000460 c035      	RJMP __MINRES
                 
                 __UNPACK:
000461 e850      	LDI  R21,0x80
000462 2e19      	MOV  R1,R25
000463 2215      	AND  R1,R21
000464 0f88      	LSL  R24
000465 1f99      	ROL  R25
000466 2795      	EOR  R25,R21
000467 0f55      	LSL  R21
000468 9587      	ROR  R24
                 
                 __UNPACK1:
000469 e850      	LDI  R21,0x80
00046a 2e07      	MOV  R0,R23
00046b 2205      	AND  R0,R21
00046c 0f66      	LSL  R22
00046d 1f77      	ROL  R23
00046e 2775      	EOR  R23,R21
00046f 0f55      	LSL  R21
000470 9567      	ROR  R22
000471 9508      	RET
                 
                 __CDF1U:
000472 9468      	SET
000473 c001      	RJMP __CDF1U0
                 __CDF1:
000474 94e8      	CLT
                 __CDF1U0:
000475 9730      	SBIW R30,0
000476 4060      	SBCI R22,0
000477 4070      	SBCI R23,0
000478 f0b1      	BREQ __CDF10
000479 2400      	CLR  R0
00047a f026      	BRTS __CDF11
00047b 2377      	TST  R23
00047c f412      	BRPL __CDF11
00047d 9400      	COM  R0
00047e d070      	RCALL __ANEGD1
                 __CDF11:
00047f 2e17      	MOV  R1,R23
000480 e17e      	LDI  R23,30
000481 2011      	TST  R1
                 __CDF12:
000482 f032      	BRMI __CDF13
000483 957a      	DEC  R23
000484 0fee      	LSL  R30
000485 1fff      	ROL  R31
000486 1f66      	ROL  R22
000487 1c11      	ROL  R1
000488 cff9      	RJMP __CDF12
                 __CDF13:
000489 2fef      	MOV  R30,R31
00048a 2ff6      	MOV  R31,R22
00048b 2d61      	MOV  R22,R1
00048c 935f      	PUSH R21
00048d dfc1      	RCALL __REPACK
00048e 915f      	POP  R21
                 __CDF10:
00048f 9508      	RET
                 
                 __ZERORES:
000490 27ee      	CLR  R30
000491 27ff      	CLR  R31
000492 2766      	CLR  R22
000493 2777      	CLR  R23
000494 915f      	POP  R21
000495 9508      	RET
                 
                 __MINRES:
000496 efef      	SER  R30
000497 efff      	SER  R31
000498 e76f      	LDI  R22,0x7F
000499 ef7f      	SER  R23
00049a 915f      	POP  R21
00049b 9508      	RET
                 
                 __MAXRES:
00049c efef      	SER  R30
00049d efff      	SER  R31
00049e e76f      	LDI  R22,0x7F
00049f e77f      	LDI  R23,0x7F
0004a0 915f      	POP  R21
0004a1 9508      	RET
                 
                 __DIVF21:
0004a2 935f      	PUSH R21
0004a3 dfbd      	RCALL __UNPACK
0004a4 3870      	CPI  R23,0x80
0004a5 f421      	BRNE __DIVF210
0004a6 2011      	TST  R1
                 __DIVF211:
0004a7 f40a      	BRPL __DIVF219
0004a8 cfed      	RJMP __MINRES
                 __DIVF219:
0004a9 cff2      	RJMP __MAXRES
                 __DIVF210:
0004aa 3890      	CPI  R25,0x80
0004ab f409      	BRNE __DIVF218
                 __DIVF217:
0004ac cfe3      	RJMP __ZERORES
                 __DIVF218:
0004ad 2401      	EOR  R0,R1
0004ae 9408      	SEC
0004af 0b97      	SBC  R25,R23
0004b0 f41b      	BRVC __DIVF216
0004b1 f3d4      	BRLT __DIVF217
0004b2 2000      	TST  R0
0004b3 cff3      	RJMP __DIVF211
                 __DIVF216:
0004b4 2f79      	MOV  R23,R25
0004b5 931f      	PUSH R17
0004b6 932f      	PUSH R18
0004b7 933f      	PUSH R19
0004b8 934f      	PUSH R20
0004b9 2411      	CLR  R1
0004ba 2711      	CLR  R17
0004bb 2722      	CLR  R18
0004bc 2733      	CLR  R19
0004bd 2744      	CLR  R20
0004be 2755      	CLR  R21
0004bf e290      	LDI  R25,32
                 __DIVF212:
0004c0 17ae      	CP   R26,R30
0004c1 07bf      	CPC  R27,R31
0004c2 0786      	CPC  R24,R22
0004c3 0741      	CPC  R20,R17
0004c4 f030      	BRLO __DIVF213
0004c5 1bae      	SUB  R26,R30
0004c6 0bbf      	SBC  R27,R31
0004c7 0b86      	SBC  R24,R22
0004c8 0b41      	SBC  R20,R17
0004c9 9408      	SEC
0004ca c001      	RJMP __DIVF214
                 __DIVF213:
0004cb 9488      	CLC
                 __DIVF214:
0004cc 1f55      	ROL  R21
0004cd 1f22      	ROL  R18
0004ce 1f33      	ROL  R19
0004cf 1c11      	ROL  R1
0004d0 1faa      	ROL  R26
0004d1 1fbb      	ROL  R27
0004d2 1f88      	ROL  R24
0004d3 1f44      	ROL  R20
0004d4 959a      	DEC  R25
0004d5 f751      	BRNE __DIVF212
0004d6 01f9      	MOVW R30,R18
0004d7 2d61      	MOV  R22,R1
0004d8 914f      	POP  R20
0004d9 913f      	POP  R19
0004da 912f      	POP  R18
0004db 911f      	POP  R17
0004dc 2366      	TST  R22
0004dd f032      	BRMI __DIVF215
0004de 0f55      	LSL  R21
0004df 1fee      	ROL  R30
0004e0 1fff      	ROL  R31
0004e1 1f66      	ROL  R22
0004e2 957a      	DEC  R23
0004e3 f243      	BRVS __DIVF217
                 __DIVF215:
0004e4 df60      	RCALL __ROUND_REPACK
0004e5 915f      	POP  R21
0004e6 9508      	RET
                 
                 __ADDW2R15:
0004e7 2400      	CLR  R0
0004e8 0daf      	ADD  R26,R15
0004e9 1db0      	ADC  R27,R0
0004ea 9508      	RET
                 
                 __ANEGW1:
0004eb 95f1      	NEG  R31
0004ec 95e1      	NEG  R30
0004ed 40f0      	SBCI R31,0
0004ee 9508      	RET
                 
                 __ANEGD1:
0004ef 95f0      	COM  R31
0004f0 9560      	COM  R22
0004f1 9570      	COM  R23
0004f2 95e1      	NEG  R30
0004f3 4fff      	SBCI R31,-1
0004f4 4f6f      	SBCI R22,-1
0004f5 4f7f      	SBCI R23,-1
0004f6 9508      	RET
                 
                 __CWD1:
0004f7 2f6f      	MOV  R22,R31
0004f8 0f66      	ADD  R22,R22
0004f9 0b66      	SBC  R22,R22
0004fa 2f76      	MOV  R23,R22
0004fb 9508      	RET
                 
                 __MULW12U:
0004fc 9ffa      	MUL  R31,R26
0004fd 2df0      	MOV  R31,R0
0004fe 9feb      	MUL  R30,R27
0004ff 0df0      	ADD  R31,R0
000500 9fea      	MUL  R30,R26
000501 2de0      	MOV  R30,R0
000502 0df1      	ADD  R31,R1
000503 9508      	RET
                 
                 __MULW12:
000504 d01c      	RCALL __CHKSIGNW
000505 dff6      	RCALL __MULW12U
000506 f40e      	BRTC __MULW121
000507 dfe3      	RCALL __ANEGW1
                 __MULW121:
000508 9508      	RET
                 
                 __DIVW21U:
000509 2400      	CLR  R0
00050a 2411      	CLR  R1
00050b e190      	LDI  R25,16
                 __DIVW21U1:
00050c 0faa      	LSL  R26
00050d 1fbb      	ROL  R27
00050e 1c00      	ROL  R0
00050f 1c11      	ROL  R1
000510 1a0e      	SUB  R0,R30
000511 0a1f      	SBC  R1,R31
000512 f418      	BRCC __DIVW21U2
000513 0e0e      	ADD  R0,R30
000514 1e1f      	ADC  R1,R31
000515 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000516 60a1      	SBR  R26,1
                 __DIVW21U3:
000517 959a      	DEC  R25
000518 f799      	BRNE __DIVW21U1
000519 01fd      	MOVW R30,R26
00051a 01d0      	MOVW R26,R0
00051b 9508      	RET
                 
                 __DIVW21:
00051c d004      	RCALL __CHKSIGNW
00051d dfeb      	RCALL __DIVW21U
00051e f40e      	BRTC __DIVW211
00051f dfcb      	RCALL __ANEGW1
                 __DIVW211:
000520 9508      	RET
                 
                 __CHKSIGNW:
000521 94e8      	CLT
000522 fff7      	SBRS R31,7
000523 c002      	RJMP __CHKSW1
000524 dfc6      	RCALL __ANEGW1
000525 9468      	SET
                 __CHKSW1:
000526 ffb7      	SBRS R27,7
000527 c006      	RJMP __CHKSW2
000528 95a0      	COM  R26
000529 95b0      	COM  R27
00052a 9611      	ADIW R26,1
00052b f800      	BLD  R0,0
00052c 9403      	INC  R0
00052d fa00      	BST  R0,0
                 __CHKSW2:
00052e 9508      	RET
                 
                 __GETW1P:
00052f 91ed      	LD   R30,X+
000530 91fc      	LD   R31,X
000531 9711      	SBIW R26,1
000532 9508      	RET
                 
                 __GETW1PF:
000533 9005      	LPM  R0,Z+
000534 91f4      	LPM  R31,Z
000535 2de0      	MOV  R30,R0
000536 9508      	RET
                 
                 __PUTPARD1:
000537 937a      	ST   -Y,R23
000538 936a      	ST   -Y,R22
000539 93fa      	ST   -Y,R31
00053a 93ea      	ST   -Y,R30
00053b 9508      	RET
                 
                 __SAVELOCR6:
00053c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00053d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00053e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00053f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000540 931a      	ST   -Y,R17
000541 930a      	ST   -Y,R16
000542 9508      	RET
                 
                 __LOADLOCR6:
000543 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000544 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000545 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000546 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000547 8119      	LDD  R17,Y+1
000548 8108      	LD   R16,Y
000549 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  30 r1 :  17 r2 :   0 r3 :   0 r4 :   5 r5 :   1 r6 :   5 r7 :   1 
r8 :  14 r9 :   2 r10:   6 r11:   4 r12:   9 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  29 r18:  34 r19:  12 r20:  15 r21:  44 r22:  31 r23:  22 
r24:  30 r25:  17 r26: 128 r27:  53 r28:  15 r29:   1 r30: 244 r31: 111 
x  :  23 y  : 165 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   9 
adiw  :  27 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  21 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   1 brmi  :   4 brne  :  40 brpl  :   4 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  81 
cbi   :   9 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   6 
cp    :  12 cpc   :  12 cpi   :  37 cpse  :   0 dec   :   9 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  26 ld    :  26 ldd   :  75 ldi   : 162 
lds   :   8 lpm   :  14 lsl   :   9 lsr   :   0 mov   :  27 movw  :  45 
mul   :   4 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   1 
ori   :   7 out   :  11 pop   :  10 push  :   9 rcall :  36 ret   :  41 
reti  :   0 rjmp  :  94 rol   :  19 ror   :   4 sbc   :   8 sbci  :   7 
sbi   :   9 sbic  :  16 sbis  :   0 sbiw  :  20 sbr   :   1 sbrc  :   2 
sbrs  :  13 sec   :   2 seh   :   0 sei   :   0 sen   :   0 ser   :   5 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :  31 sts   :  15 sub   :   4 subi  :  18 swap  :   1 
tst   :  11 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a94   2660     48   2708   32768   8.3%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
