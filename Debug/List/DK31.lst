
AVRASM ver. 2.1.30  C:\Users\Myx\Documents\avr\Debug\List\DK31.asm Tue Jan 02 14:47:58 2024

C:\Users\Myx\Documents\avr\Debug\List\DK31.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Myx\Documents\avr\Debug\List\DK31.asm(1089): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tocdo=R4
                 	.DEF _tocdo_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 006d 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0088 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0005      	.DB  0x5,0x0
                 
                 _0x3:
000034 0100
000035 0302
000036 0504
000037 0706      	.DB  0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7
000038 0908      	.DB  0x8,0x9
                 
                 __GLOBAL_INI_TBL:
000039 0002      	.DW  0x02
00003a 0004      	.DW  0x04
00003b 0066      	.DW  __REG_VARS*2
                 
00003c 000a      	.DW  0x0A
00003d 0160      	.DW  _number
00003e 0068      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000047 e08d      	LDI  R24,(14-2)+1
000048 e0a2      	LDI  R26,2
000049 27bb      	CLR  R27
                 __CLEAR_REG:
00004a 93ed      	ST   X+,R30
00004b 958a      	DEC  R24
00004c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000050 93ed      	ST   X+,R30
000051 9701      	SBIW R24,1
000052 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000053 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000054 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000055 9185      	LPM  R24,Z+
000056 9195      	LPM  R25,Z+
000057 9700      	SBIW R24,0
000058 f061      	BREQ __GLOBAL_INI_END
000059 91a5      	LPM  R26,Z+
00005a 91b5      	LPM  R27,Z+
00005b 9005      	LPM  R0,Z+
00005c 9015      	LPM  R1,Z+
00005d 01bf      	MOVW R22,R30
00005e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005f 9005      	LPM  R0,Z+
000060 920d      	ST   X+,R0
000061 9701      	SBIW R24,1
000062 f7e1      	BRNE __GLOBAL_INI_LOOP
000063 01fb      	MOVW R30,R22
000064 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000065 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000066 bfed      	OUT  SPL,R30
000067 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000068 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000069 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006b 940c 0112 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;#define thuan PINC.0
                 ;#define nguoc PINC.1
                 ;#define tang PINC.2
                 ;#define giam PINC.3
                 ;#define dung PINC.4
                 ;
                 ;#define IN1 PORTD.0
                 ;#define IN2 PORTD.1
                 ;#define IN3 PORTD.2
                 ;#define IN4 PORTD.3
                 ;
                 ;#define kp 300
                 ;#define ki 100
                 ;
                 ;unsigned char number[10] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
                 
                 	.DSEG
                 ;
                 ;int tocdo =5;
                 ;
                 ;void tangtoc(void);
                 ;void giamtoc(void);
                 ;void chaythuan(void);
                 ;void chaynguoc(void);
                 ;void dunglai(void);
                 ;void dieukhien(void);
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;long int n=0;
                 ;long int delta_v,toc_do,setpoint;
                 ;long int sum_e=0;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0029 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00006d 936a      	ST   -Y,R22
00006e 937a      	ST   -Y,R23
00006f 93aa      	ST   -Y,R26
000070 93ba      	ST   -Y,R27
000071 93ea      	ST   -Y,R30
000072 93fa      	ST   -Y,R31
000073 b7ef      	IN   R30,SREG
000074 93ea      	ST   -Y,R30
                 ; 0000 002A // Place your code here
                 ; 0000 002B     n++;
000075 e6aa      	LDI  R26,LOW(_n)
000076 e0b1      	LDI  R27,HIGH(_n)
000077 940e 0284 	CALL __GETD1P_INC
                +
000079 5fef     +SUBI R30 , LOW ( - 1 )
00007a 4fff     +SBCI R31 , HIGH ( - 1 )
00007b 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00007c 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00007d 940e 0289 	CALL __PUTDP1_DEC
                 ; 0000 002C }
00007f 91e9      	LD   R30,Y+
000080 bfef      	OUT  SREG,R30
000081 91f9      	LD   R31,Y+
000082 91e9      	LD   R30,Y+
000083 91b9      	LD   R27,Y+
000084 91a9      	LD   R26,Y+
000085 9179      	LD   R23,Y+
000086 9169      	LD   R22,Y+
000087 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 002F {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000088 920a      	ST   -Y,R0
000089 921a      	ST   -Y,R1
00008a 936a      	ST   -Y,R22
00008b 937a      	ST   -Y,R23
00008c 938a      	ST   -Y,R24
00008d 939a      	ST   -Y,R25
00008e 93aa      	ST   -Y,R26
00008f 93ba      	ST   -Y,R27
000090 93ea      	ST   -Y,R30
000091 93fa      	ST   -Y,R31
000092 b7ef      	IN   R30,SREG
000093 93ea      	ST   -Y,R30
                 ; 0000 0030 // Place your code here
                 ; 0000 0031    // tinh toc do
                 ; 0000 0032     toc_do = 75*n; //toc do = (n/8*N)*1000*60
000094 91e0 016a 	LDS  R30,_n
000096 91f0 016b 	LDS  R31,_n+1
000098 9160 016c 	LDS  R22,_n+2
00009a 9170 016d 	LDS  R23,_n+3
                +
00009c e4ab     +LDI R26 , LOW ( 0x4B )
00009d e0b0     +LDI R27 , HIGH ( 0x4B )
00009e e080     +LDI R24 , BYTE3 ( 0x4B )
00009f e090     +LDI R25 , BYTE4 ( 0x4B )
                 	__GETD2N 0x4B
0000a0 940e 0248 	CALL __MULD12
0000a2 93e0 0172 	STS  _toc_do,R30
0000a4 93f0 0173 	STS  _toc_do+1,R31
0000a6 9360 0174 	STS  _toc_do+2,R22
0000a8 9370 0175 	STS  _toc_do+3,R23
                 ; 0000 0033     sum_e += delta_v;
0000aa 940e 01e4 	CALL SUBOPT_0x0
0000ac 91a0 017a 	LDS  R26,_sum_e
0000ae 91b0 017b 	LDS  R27,_sum_e+1
0000b0 9180 017c 	LDS  R24,_sum_e+2
0000b2 9190 017d 	LDS  R25,_sum_e+3
0000b4 940e 0200 	CALL __ADDD12
0000b6 93e0 017a 	STS  _sum_e,R30
0000b8 93f0 017b 	STS  _sum_e+1,R31
0000ba 9360 017c 	STS  _sum_e+2,R22
0000bc 9370 017d 	STS  _sum_e+3,R23
                 ; 0000 0034    //reset n
                 ; 0000 0035    n=0;
0000be e0e0      	LDI  R30,LOW(0)
0000bf 93e0 016a 	STS  _n,R30
0000c1 93e0 016b 	STS  _n+1,R30
0000c3 93e0 016c 	STS  _n+2,R30
0000c5 93e0 016d 	STS  _n+3,R30
                 ; 0000 0036 }
0000c7 91e9      	LD   R30,Y+
0000c8 bfef      	OUT  SREG,R30
0000c9 91f9      	LD   R31,Y+
0000ca 91e9      	LD   R30,Y+
0000cb 91b9      	LD   R27,Y+
0000cc 91a9      	LD   R26,Y+
0000cd 9199      	LD   R25,Y+
0000ce 9189      	LD   R24,Y+
0000cf 9179      	LD   R23,Y+
0000d0 9169      	LD   R22,Y+
0000d1 9019      	LD   R1,Y+
0000d2 9009      	LD   R0,Y+
0000d3 9518      	RETI
                 ; .FEND
                 ;
                 ;void hiemthi(unsigned int x)
                 ; 0000 0039 {
                 _hiemthi:
                 ; .FSTART _hiemthi
                 ; 0000 003A      unsigned int temp;
                 ; 0000 003B      //unsigned char a,b,c,d;
                 ; 0000 003C      unsigned char m[4],i ;
                 ; 0000 003D 
                 ; 0000 003E   // tach so, luu vao 4 bien a b c d
                 ; 0000 003F      temp=x;
0000d4 93ba      	ST   -Y,R27
0000d5 93aa      	ST   -Y,R26
0000d6 9724      	SBIW R28,4
0000d7 940e 0295 	CALL __SAVELOCR4
                 ;	x -> Y+8
                 ;	temp -> R16,R17
                 ;	m -> Y+4
                 ;	i -> R19
                +
0000d9 8508     +LDD R16 , Y + 8
0000da 8519     +LDD R17 , Y + 8 + 1
                 	__GETWRS 16,17,8
                 ; 0000 0040      for(i=0;i<4;i++)
0000db e030      	LDI  R19,LOW(0)
                 _0x5:
0000dc 3034      	CPI  R19,4
0000dd f4e0      	BRSH _0x6
                 ; 0000 0041      {
                 ; 0000 0042      m[3-i]=temp % 10;
0000de 2fe3      	MOV  R30,R19
0000df e0f0      	LDI  R31,0
0000e0 e0a3      	LDI  R26,LOW(3)
0000e1 e0b0      	LDI  R27,HIGH(3)
0000e2 940e 028e 	CALL __SWAPW12
0000e4 1bea      	SUB  R30,R26
0000e5 0bfb      	SBC  R31,R27
0000e6 01de      	MOVW R26,R28
0000e7 9614      	ADIW R26,4
0000e8 0fea      	ADD  R30,R26
0000e9 1ffb      	ADC  R31,R27
0000ea 01bf      	MOVW R22,R30
0000eb 01d8      	MOVW R26,R16
0000ec e0ea      	LDI  R30,LOW(10)
0000ed e0f0      	LDI  R31,HIGH(10)
0000ee 940e 0260 	CALL __MODW21U
0000f0 01db      	MOVW R26,R22
0000f1 93ec      	ST   X,R30
                 ; 0000 0043      temp =temp/10;
0000f2 01d8      	MOVW R26,R16
0000f3 e0ea      	LDI  R30,LOW(10)
0000f4 e0f0      	LDI  R31,HIGH(10)
0000f5 940e 024d 	CALL __DIVW21U
0000f7 018f      	MOVW R16,R30
                 ; 0000 0044      }
0000f8 5f3f      	SUBI R19,-1
0000f9 cfe2      	RJMP _0x5
                 _0x6:
                 ; 0000 0045 
                 ; 0000 0046      // dieu khien cho LED1 sang, hiem thi chu so a
                 ; 0000 0047      PORTA.0 =0;
0000fa 98d8      	CBI  0x1B,0
                 ; 0000 0048      PORTB = number[m[0]];
0000fb 81ec      	LDD  R30,Y+4
0000fc 940e 01ed 	CALL SUBOPT_0x1
                 ; 0000 0049      delay_ms(1);
                 ; 0000 004A      PORTA.0 =1;
0000fe 9ad8      	SBI  0x1B,0
                 ; 0000 004B      // dieu khien cho LED2 sang, hiem thi chu so b
                 ; 0000 004C      PORTA.1 =0;
0000ff 98d9      	CBI  0x1B,1
                 ; 0000 004D      PORTB = number[m[1]];
000100 81ed      	LDD  R30,Y+5
000101 940e 01ed 	CALL SUBOPT_0x1
                 ; 0000 004E      delay_ms(1);
                 ; 0000 004F      PORTA.1 =1;
000103 9ad9      	SBI  0x1B,1
                 ; 0000 0050      // dieu khien cho LED3 sang, hiem thi chu so c
                 ; 0000 0051      PORTA.2 =0;
000104 98da      	CBI  0x1B,2
                 ; 0000 0052      PORTB = number[m[2]];
000105 81ee      	LDD  R30,Y+6
000106 940e 01ed 	CALL SUBOPT_0x1
                 ; 0000 0053      delay_ms(1);
                 ; 0000 0054      PORTA.2 =1;
000108 9ada      	SBI  0x1B,2
                 ; 0000 0055      // dieu khien cho LED4 sang, hiem thi chu so d
                 ; 0000 0056      PORTA.3 =0;
000109 98db      	CBI  0x1B,3
                 ; 0000 0057      PORTB = number[m[3]];
00010a 81ef      	LDD  R30,Y+7
00010b 940e 01ed 	CALL SUBOPT_0x1
                 ; 0000 0058      delay_ms(1);
                 ; 0000 0059      PORTA.3 =1;
00010d 9adb      	SBI  0x1B,3
                 ; 0000 005A 
                 ; 0000 005B }
00010e 940e 029a 	CALL __LOADLOCR4
000110 962a      	ADIW R28,10
000111 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 005F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0060 //Cong D
                 ; 0000 0061 DDRD=0xff;
000112 efef      	LDI  R30,LOW(255)
000113 bbe1      	OUT  0x11,R30
                 ; 0000 0062 PORTD.5=0;
000114 9895      	CBI  0x12,5
                 ; 0000 0063 PORTD.0 = 1;
000115 9a90      	SBI  0x12,0
                 ; 0000 0064 PORTD.1 = 0;
000116 9891      	CBI  0x12,1
                 ; 0000 0065 
                 ; 0000 0066 // cong
                 ; 0000 0067 
                 ; 0000 0068 PORTC =0xFF;
000117 bbe5      	OUT  0x15,R30
                 ; 0000 0069 DDRB = 0xFF;
000118 bbe7      	OUT  0x17,R30
                 ; 0000 006A DDRA=0xFF;
000119 bbea      	OUT  0x1A,R30
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D //setup pwm
                 ; 0000 006E 
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 1 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: 8000.000 kHz
                 ; 0000 0073 // Mode: Fast PWM top=0x03FF
                 ; 0000 0074 // OC1A output: Non-Inverted PWM
                 ; 0000 0075 // OC1B output: Inverted PWM
                 ; 0000 0076 // Noise Canceler: Off
                 ; 0000 0077 // Input Capture on Falling Edge
                 ; 0000 0078 // Timer Period: 0.128 ms
                 ; 0000 0079 // Output Pulse(s):
                 ; 0000 007A // OC1A Period: 0.128 ms Width: 0 us
                 ; 0000 007B // OC1B Period: 0.128 ms Width: 0.128 ms
                 ; 0000 007C // Timer1 Overflow Interrupt: Off
                 ; 0000 007D // Input Capture Interrupt: Off
                 ; 0000 007E // Compare A Match Interrupt: Off
                 ; 0000 007F // Compare B Match Interrupt: Off
                 ; 0000 0080 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM11) | (1<<WGM10);
00011a ebe3      	LDI  R30,LOW(179)
00011b bdef      	OUT  0x2F,R30
                 ; 0000 0081 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00011c e0e9      	LDI  R30,LOW(9)
00011d bdee      	OUT  0x2E,R30
                 ; 0000 0082 TCNT1H=0x00;
00011e e0e0      	LDI  R30,LOW(0)
00011f bded      	OUT  0x2D,R30
                 ; 0000 0083 TCNT1L=0x00;
000120 bdec      	OUT  0x2C,R30
                 ; 0000 0084 ICR1H=0x00;
000121 bde7      	OUT  0x27,R30
                 ; 0000 0085 ICR1L=0x00;
000122 bde6      	OUT  0x26,R30
                 ; 0000 0086 OCR1AH=0x00;
000123 bdeb      	OUT  0x2B,R30
                 ; 0000 0087 OCR1AL=0x00;
000124 bdea      	OUT  0x2A,R30
                 ; 0000 0088 OCR1BH=0x00;
000125 bde9      	OUT  0x29,R30
                 ; 0000 0089 OCR1BL=0x00;
000126 bde8      	OUT  0x28,R30
                 ; 0000 008A 
                 ; 0000 008B // TIM0 init
                 ; 0000 008C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000127 e0e4      	LDI  R30,LOW(4)
000128 bfe3      	OUT  0x33,R30
                 ; 0000 008D TCNT0=0x00;
000129 e0e0      	LDI  R30,LOW(0)
00012a bfe2      	OUT  0x32,R30
                 ; 0000 008E OCR0=0x00;
00012b bfec      	OUT  0x3C,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0091 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00012c e0e1      	LDI  R30,LOW(1)
00012d bfe9      	OUT  0x39,R30
                 ; 0000 0092 
                 ; 0000 0093 // External Interrupt(s) initialization
                 ; 0000 0094 // INT0: On
                 ; 0000 0095 // INT0 Mode: Falling Edge
                 ; 0000 0096 // INT1: Off
                 ; 0000 0097 // INT2: Off
                 ; 0000 0098 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
00012e b7eb      	IN   R30,0x3B
00012f 64e0      	ORI  R30,0x40
000130 bfeb      	OUT  0x3B,R30
                 ; 0000 0099 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
000131 e0e2      	LDI  R30,LOW(2)
000132 bfe5      	OUT  0x35,R30
                 ; 0000 009A MCUCSR=(0<<ISC2);
000133 e0e0      	LDI  R30,LOW(0)
000134 bfe4      	OUT  0x34,R30
                 ; 0000 009B GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000135 e4e0      	LDI  R30,LOW(64)
000136 bfea      	OUT  0x3A,R30
                 ; 0000 009C 
                 ; 0000 009D 
                 ; 0000 009E while (1)
                 _0x1D:
                 ; 0000 009F {
                 ; 0000 00A0       hiemthi(tocdo);
000137 01d2      	MOVW R26,R4
000138 df9b      	RCALL _hiemthi
                 ; 0000 00A1       dieukhien();
000139 d093      	RCALL _dieukhien
                 ; 0000 00A2 
                 ; 0000 00A3       //TinhtoanPWM
                 ; 0000 00A4           delta_v = setpoint - toc_do;
00013a 91a0 0172 	LDS  R26,_toc_do
00013c 91b0 0173 	LDS  R27,_toc_do+1
00013e 9180 0174 	LDS  R24,_toc_do+2
000140 9190 0175 	LDS  R25,_toc_do+3
000142 91e0 0176 	LDS  R30,_setpoint
000144 91f0 0177 	LDS  R31,_setpoint+1
000146 9160 0178 	LDS  R22,_setpoint+2
000148 9170 0179 	LDS  R23,_setpoint+3
00014a 940e 020a 	CALL __SUBD12
00014c 93e0 016e 	STS  _delta_v,R30
00014e 93f0 016f 	STS  _delta_v+1,R31
000150 9360 0170 	STS  _delta_v+2,R22
000152 9370 0171 	STS  _delta_v+3,R23
                 ; 0000 00A5       if(delta_v<0)
000154 91a0 0171 	LDS  R26,_delta_v+3
000156 23aa      	TST  R26
000157 f41a      	BRPL _0x20
                 ; 0000 00A6       {
                 ; 0000 00A7         OCR1A=0;
000158 e0e0      	LDI  R30,LOW(0)
000159 e0f0      	LDI  R31,HIGH(0)
00015a c03e      	RJMP _0x4C
                 ; 0000 00A8       }
                 ; 0000 00A9       else
                 _0x20:
                 ; 0000 00AA       {
                 ; 0000 00AB         if((kp*delta_v+ki*sum_e)>0x3ff) OCR1A = 0x3ff;
00015b 940e 01e4 	CALL SUBOPT_0x0
                +
00015d e2ac     +LDI R26 , LOW ( 0x12C )
00015e e0b1     +LDI R27 , HIGH ( 0x12C )
00015f e080     +LDI R24 , BYTE3 ( 0x12C )
000160 e090     +LDI R25 , BYTE4 ( 0x12C )
                 	__GETD2N 0x12C
000161 940e 0248 	CALL __MULD12
000163 937f      	PUSH R23
000164 936f      	PUSH R22
000165 93ff      	PUSH R31
000166 93ef      	PUSH R30
000167 91e0 017a 	LDS  R30,_sum_e
000169 91f0 017b 	LDS  R31,_sum_e+1
00016b 9160 017c 	LDS  R22,_sum_e+2
00016d 9170 017d 	LDS  R23,_sum_e+3
                +
00016f e6a4     +LDI R26 , LOW ( 0x64 )
000170 e0b0     +LDI R27 , HIGH ( 0x64 )
000171 e080     +LDI R24 , BYTE3 ( 0x64 )
000172 e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
000173 940e 0248 	CALL __MULD12
000175 91af      	POP  R26
000176 91bf      	POP  R27
000177 918f      	POP  R24
000178 919f      	POP  R25
000179 940e 0205 	CALL __ADDD21
                +
00017b 30a0     +CPI R26 , LOW ( 0x400 )
00017c e0e4     +LDI R30 , HIGH ( 0x400 )
00017d 07be     +CPC R27 , R30
00017e e0e0     +LDI R30 , BYTE3 ( 0x400 )
00017f 078e     +CPC R24 , R30
000180 e0e0     +LDI R30 , BYTE4 ( 0x400 )
000181 079e     +CPC R25 , R30
                 	__CPD2N 0x400
000182 f01c      	BRLT _0x22
000183 efef      	LDI  R30,LOW(1023)
000184 e0f3      	LDI  R31,HIGH(1023)
000185 c013      	RJMP _0x4C
                 ; 0000 00AC         else OCR1A = kp*delta_v+ki*sum_e;
                 _0x22:
000186 91e0 016e 	LDS  R30,_delta_v
000188 91f0 016f 	LDS  R31,_delta_v+1
00018a e2ac      	LDI  R26,LOW(300)
00018b e0b1      	LDI  R27,HIGH(300)
00018c 940e 0243 	CALL __MULW12
00018e 01bf      	MOVW R22,R30
00018f 91e0 017a 	LDS  R30,_sum_e
000191 91f0 017b 	LDS  R31,_sum_e+1
000193 e6a4      	LDI  R26,LOW(100)
000194 e0b0      	LDI  R27,HIGH(100)
000195 940e 0243 	CALL __MULW12
000197 0fe6      	ADD  R30,R22
000198 1ff7      	ADC  R31,R23
                 _0x4C:
000199 bdfb      	OUT  0x2A+1,R31
00019a bdea      	OUT  0x2A,R30
                 ; 0000 00AD       }
                 ; 0000 00AE 
                 ; 0000 00AF       if(dung == 0)
00019b 9b9c      	SBIS 0x13,4
                 ; 0000 00B0       {
                 ; 0000 00B1         dunglai();
00019c d02a      	RCALL _dunglai
                 ; 0000 00B2       }
                 ; 0000 00B3 }
00019d cf99      	RJMP _0x1D
                 ; 0000 00B4 }
                 _0x25:
00019e cfff      	RJMP _0x25
                 ; .FEND
                 ;void tangtoc(void)
                 ; 0000 00B6 {
                 _tangtoc:
                 ; .FSTART _tangtoc
                 ; 0000 00B7 
                 ; 0000 00B8       tocdo = tocdo - 1;
00019f 01f2      	MOVW R30,R4
0001a0 9731      	SBIW R30,1
0001a1 012f      	MOVW R4,R30
                 ; 0000 00B9       if (tocdo<1) { tocdo=1;}
0001a2 e0e1      	LDI  R30,LOW(1)
0001a3 e0f0      	LDI  R31,HIGH(1)
0001a4 164e      	CP   R4,R30
0001a5 065f      	CPC  R5,R31
0001a6 f40c      	BRGE _0x26
0001a7 012f      	MOVW R4,R30
                 ; 0000 00BA       hiemthi(tocdo);
                 _0x26:
0001a8 c009      	RJMP _0x2060001
                 ; 0000 00BB }
                 ; .FEND
                 ;void giamtoc(void)
                 ; 0000 00BD {
                 _giamtoc:
                 ; .FSTART _giamtoc
                 ; 0000 00BE 
                 ; 0000 00BF       tocdo = tocdo + 1;
0001a9 01f2      	MOVW R30,R4
0001aa 9631      	ADIW R30,1
0001ab 012f      	MOVW R4,R30
                 ; 0000 00C0       if (tocdo>10) {tocdo=10;}
0001ac e0ea      	LDI  R30,LOW(10)
0001ad e0f0      	LDI  R31,HIGH(10)
0001ae 15e4      	CP   R30,R4
0001af 05f5      	CPC  R31,R5
0001b0 f40c      	BRGE _0x27
0001b1 012f      	MOVW R4,R30
                 ; 0000 00C1       hiemthi(tocdo);
                 _0x27:
                 _0x2060001:
0001b2 01d2      	MOVW R26,R4
0001b3 df20      	RCALL _hiemthi
                 ; 0000 00C2 }
0001b4 9508      	RET
                 ; .FEND
                 ;
                 ;void chaythuan(void)
                 ; 0000 00C5 {
                 _chaythuan:
                 ; .FSTART _chaythuan
                 ; 0000 00C6 
                 ; 0000 00C7    while ( dung!=0)
                 _0x28:
0001b5 9b9c      	SBIS 0x13,4
0001b6 c006      	RJMP _0x2A
                 ; 0000 00C8    {
                 ; 0000 00C9     hiemthi(tocdo);
0001b7 01d2      	MOVW R26,R4
0001b8 df1b      	RCALL _hiemthi
                 ; 0000 00CA     IN1 = 1;
0001b9 9a90      	SBI  0x12,0
                 ; 0000 00CB     IN2 = 0;
0001ba 9891      	CBI  0x12,1
                 ; 0000 00CC    // setpoint=50;
                 ; 0000 00CD     PORTD.5=1;
0001bb 9a95      	SBI  0x12,5
                 ; 0000 00CE     //delay_ms(50);
                 ; 0000 00CF    }
0001bc cff8      	RJMP _0x28
                 _0x2A:
                 ; 0000 00D0 
                 ; 0000 00D1 
                 ; 0000 00D2 }
0001bd 9508      	RET
                 ; .FEND
                 ;
                 ;void chaynguoc(void)
                 ; 0000 00D5 {
                 _chaynguoc:
                 ; .FSTART _chaynguoc
                 ; 0000 00D6 
                 ; 0000 00D7    while (dung!=0)
                 _0x31:
0001be 9b9c      	SBIS 0x13,4
0001bf c006      	RJMP _0x33
                 ; 0000 00D8    {
                 ; 0000 00D9     hiemthi(tocdo);
0001c0 01d2      	MOVW R26,R4
0001c1 df12      	RCALL _hiemthi
                 ; 0000 00DA     IN1 = 0;
0001c2 9890      	CBI  0x12,0
                 ; 0000 00DB     IN2 = 1;
0001c3 9a91      	SBI  0x12,1
                 ; 0000 00DC    // setpoint=20;
                 ; 0000 00DD     PORTD.5=1;
0001c4 9a95      	SBI  0x12,5
                 ; 0000 00DE     //delay_ms(50);
                 ; 0000 00DF    }
0001c5 cff8      	RJMP _0x31
                 _0x33:
                 ; 0000 00E0 
                 ; 0000 00E1 
                 ; 0000 00E2 }
0001c6 9508      	RET
                 ; .FEND
                 ;void dunglai(void)
                 ; 0000 00E4 {
                 _dunglai:
                 ; .FSTART _dunglai
                 ; 0000 00E5     hiemthi(0000);
0001c7 e0a0      	LDI  R26,LOW(0)
0001c8 e0b0      	LDI  R27,0
0001c9 df0a      	RCALL _hiemthi
                 ; 0000 00E6     IN1 = 0;
0001ca 9890      	CBI  0x12,0
                 ; 0000 00E7     IN2 = 0;
0001cb 9891      	CBI  0x12,1
                 ; 0000 00E8 
                 ; 0000 00E9 }
0001cc 9508      	RET
                 ; .FEND
                 ;
                 ;void dieukhien(void)
                 ; 0000 00EC {
                 _dieukhien:
                 ; .FSTART _dieukhien
                 ; 0000 00ED   if (thuan==0)
0001cd 9b98      	SBIS 0x13,0
                 ; 0000 00EE   {
                 ; 0000 00EF    {
                 ; 0000 00F0    chaythuan();
0001ce dfe6      	RCALL _chaythuan
                 ; 0000 00F1    }
                 ; 0000 00F2   }
                 ; 0000 00F3   if (nguoc==0)
0001cf 9b99      	SBIS 0x13,1
                 ; 0000 00F4   {
                 ; 0000 00F5      chaynguoc();
0001d0 dfed      	RCALL _chaynguoc
                 ; 0000 00F6    }
                 ; 0000 00F7    if (tang==0)
0001d1 999a      	SBIC 0x13,2
0001d2 c007      	RJMP _0x40
                 ; 0000 00F8    {
                 ; 0000 00F9     while (tang==0);
                 _0x41:
0001d3 9b9a      	SBIS 0x13,2
0001d4 cffe      	RJMP _0x41
                 ; 0000 00FA     tangtoc();
0001d5 dfc9      	RCALL _tangtoc
                 ; 0000 00FB     if (thuan==0)
0001d6 9b98      	SBIS 0x13,0
                 ; 0000 00FC     {
                 ; 0000 00FD     chaythuan();
0001d7 dfdd      	RCALL _chaythuan
                 ; 0000 00FE     }
                 ; 0000 00FF     if (nguoc==0)
0001d8 9b99      	SBIS 0x13,1
                 ; 0000 0100     {
                 ; 0000 0101     chaynguoc();
0001d9 dfe4      	RCALL _chaynguoc
                 ; 0000 0102     }
                 ; 0000 0103    }
                 ; 0000 0104    if (giam==0)
                 _0x40:
0001da 999b      	SBIC 0x13,3
0001db c007      	RJMP _0x46
                 ; 0000 0105    {
                 ; 0000 0106     while (giam==0);
                 _0x47:
0001dc 9b9b      	SBIS 0x13,3
0001dd cffe      	RJMP _0x47
                 ; 0000 0107     giamtoc();
0001de dfca      	RCALL _giamtoc
                 ; 0000 0108     if (thuan==0)
0001df 9b98      	SBIS 0x13,0
                 ; 0000 0109     {
                 ; 0000 010A     chaythuan();
0001e0 dfd4      	RCALL _chaythuan
                 ; 0000 010B     }
                 ; 0000 010C     if (nguoc==0)
0001e1 9b99      	SBIS 0x13,1
                 ; 0000 010D     {
                 ; 0000 010E     chaynguoc();
0001e2 dfdb      	RCALL _chaynguoc
                 ; 0000 010F     }
                 ; 0000 0110    }
                 ; 0000 0111 
                 ; 0000 0112 }
                 _0x46:
0001e3 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000160           	.BYTE 0xA
                 _n:
00016a           	.BYTE 0x4
                 _delta_v:
00016e           	.BYTE 0x4
                 _toc_do:
000172           	.BYTE 0x4
                 _setpoint:
000176           	.BYTE 0x4
                 _sum_e:
00017a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001e4 91e0 016e 	LDS  R30,_delta_v
0001e6 91f0 016f 	LDS  R31,_delta_v+1
0001e8 9160 0170 	LDS  R22,_delta_v+2
0001ea 9170 0171 	LDS  R23,_delta_v+3
0001ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
0001ed e0f0      	LDI  R31,0
0001ee 5ae0      	SUBI R30,LOW(-_number)
0001ef 4ffe      	SBCI R31,HIGH(-_number)
0001f0 81e0      	LD   R30,Z
0001f1 bbe8      	OUT  0x18,R30
0001f2 e0a1      	LDI  R26,LOW(1)
0001f3 e0b0      	LDI  R27,0
0001f4 940c 01f6 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001f6 9610      	adiw r26,0
0001f7 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001f8 ed80     +LDI R24 , LOW ( 0x7D0 )
0001f9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001fa 9701     +SBIW R24 , 1
0001fb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001fc 95a8      	wdr
0001fd 9711      	sbiw r26,1
0001fe f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ff 9508      	ret
                 
                 __ADDD12:
000200 0fea      	ADD  R30,R26
000201 1ffb      	ADC  R31,R27
000202 1f68      	ADC  R22,R24
000203 1f79      	ADC  R23,R25
000204 9508      	RET
                 
                 __ADDD21:
000205 0fae      	ADD  R26,R30
000206 1fbf      	ADC  R27,R31
000207 1f86      	ADC  R24,R22
000208 1f97      	ADC  R25,R23
000209 9508      	RET
                 
                 __SUBD12:
00020a 1bea      	SUB  R30,R26
00020b 0bfb      	SBC  R31,R27
00020c 0b68      	SBC  R22,R24
00020d 0b79      	SBC  R23,R25
00020e 9508      	RET
                 
                 __ANEGW1:
00020f 95f1      	NEG  R31
000210 95e1      	NEG  R30
000211 40f0      	SBCI R31,0
000212 9508      	RET
                 
                 __ANEGD1:
000213 95f0      	COM  R31
000214 9560      	COM  R22
000215 9570      	COM  R23
000216 95e1      	NEG  R30
000217 4fff      	SBCI R31,-1
000218 4f6f      	SBCI R22,-1
000219 4f7f      	SBCI R23,-1
00021a 9508      	RET
                 
                 __MULW12U:
00021b 9ffa      	MUL  R31,R26
00021c 2df0      	MOV  R31,R0
00021d 9feb      	MUL  R30,R27
00021e 0df0      	ADD  R31,R0
00021f 9fea      	MUL  R30,R26
000220 2de0      	MOV  R30,R0
000221 0df1      	ADD  R31,R1
000222 9508      	RET
                 
                 __MULD12U:
000223 9f7a      	MUL  R23,R26
000224 2d70      	MOV  R23,R0
000225 9f6b      	MUL  R22,R27
000226 0d70      	ADD  R23,R0
000227 9ff8      	MUL  R31,R24
000228 0d70      	ADD  R23,R0
000229 9fe9      	MUL  R30,R25
00022a 0d70      	ADD  R23,R0
00022b 9f6a      	MUL  R22,R26
00022c 2d60      	MOV  R22,R0
00022d 0d71      	ADD  R23,R1
00022e 9ffb      	MUL  R31,R27
00022f 0d60      	ADD  R22,R0
000230 1d71      	ADC  R23,R1
000231 9fe8      	MUL  R30,R24
000232 0d60      	ADD  R22,R0
000233 1d71      	ADC  R23,R1
000234 2788      	CLR  R24
000235 9ffa      	MUL  R31,R26
000236 2df0      	MOV  R31,R0
000237 0d61      	ADD  R22,R1
000238 1f78      	ADC  R23,R24
000239 9feb      	MUL  R30,R27
00023a 0df0      	ADD  R31,R0
00023b 1d61      	ADC  R22,R1
00023c 1f78      	ADC  R23,R24
00023d 9fea      	MUL  R30,R26
00023e 2de0      	MOV  R30,R0
00023f 0df1      	ADD  R31,R1
000240 1f68      	ADC  R22,R24
000241 1f78      	ADC  R23,R24
000242 9508      	RET
                 
                 __MULW12:
000243 d01f      	RCALL __CHKSIGNW
000244 dfd6      	RCALL __MULW12U
000245 f40e      	BRTC __MULW121
000246 dfc8      	RCALL __ANEGW1
                 __MULW121:
000247 9508      	RET
                 
                 __MULD12:
000248 d028      	RCALL __CHKSIGND
000249 dfd9      	RCALL __MULD12U
00024a f40e      	BRTC __MULD121
00024b dfc7      	RCALL __ANEGD1
                 __MULD121:
00024c 9508      	RET
                 
                 __DIVW21U:
00024d 2400      	CLR  R0
00024e 2411      	CLR  R1
00024f e190      	LDI  R25,16
                 __DIVW21U1:
000250 0faa      	LSL  R26
000251 1fbb      	ROL  R27
000252 1c00      	ROL  R0
000253 1c11      	ROL  R1
000254 1a0e      	SUB  R0,R30
000255 0a1f      	SBC  R1,R31
000256 f418      	BRCC __DIVW21U2
000257 0e0e      	ADD  R0,R30
000258 1e1f      	ADC  R1,R31
000259 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00025a 60a1      	SBR  R26,1
                 __DIVW21U3:
00025b 959a      	DEC  R25
00025c f799      	BRNE __DIVW21U1
00025d 01fd      	MOVW R30,R26
00025e 01d0      	MOVW R26,R0
00025f 9508      	RET
                 
                 __MODW21U:
000260 dfec      	RCALL __DIVW21U
000261 01fd      	MOVW R30,R26
000262 9508      	RET
                 
                 __CHKSIGNW:
000263 94e8      	CLT
000264 fff7      	SBRS R31,7
000265 c002      	RJMP __CHKSW1
000266 dfa8      	RCALL __ANEGW1
000267 9468      	SET
                 __CHKSW1:
000268 ffb7      	SBRS R27,7
000269 c006      	RJMP __CHKSW2
00026a 95a0      	COM  R26
00026b 95b0      	COM  R27
00026c 9611      	ADIW R26,1
00026d f800      	BLD  R0,0
00026e 9403      	INC  R0
00026f fa00      	BST  R0,0
                 __CHKSW2:
000270 9508      	RET
                 
                 __CHKSIGND:
000271 94e8      	CLT
000272 ff77      	SBRS R23,7
000273 c002      	RJMP __CHKSD1
000274 df9e      	RCALL __ANEGD1
000275 9468      	SET
                 __CHKSD1:
000276 ff97      	SBRS R25,7
000277 c00b      	RJMP __CHKSD2
000278 2400      	CLR  R0
000279 95a0      	COM  R26
00027a 95b0      	COM  R27
00027b 9580      	COM  R24
00027c 9590      	COM  R25
00027d 9611      	ADIW R26,1
00027e 1d80      	ADC  R24,R0
00027f 1d90      	ADC  R25,R0
000280 f800      	BLD  R0,0
000281 9403      	INC  R0
000282 fa00      	BST  R0,0
                 __CHKSD2:
000283 9508      	RET
                 
                 __GETD1P_INC:
000284 91ed      	LD   R30,X+
000285 91fd      	LD   R31,X+
000286 916d      	LD   R22,X+
000287 917d      	LD   R23,X+
000288 9508      	RET
                 
                 __PUTDP1_DEC:
000289 937e      	ST   -X,R23
00028a 936e      	ST   -X,R22
00028b 93fe      	ST   -X,R31
00028c 93ee      	ST   -X,R30
00028d 9508      	RET
                 
                 __SWAPW12:
00028e 2e1b      	MOV  R1,R27
00028f 2fbf      	MOV  R27,R31
000290 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000291 2e1a      	MOV  R1,R26
000292 2fae      	MOV  R26,R30
000293 2de1      	MOV  R30,R1
000294 9508      	RET
                 
                 __SAVELOCR4:
000295 933a      	ST   -Y,R19
                 __SAVELOCR3:
000296 932a      	ST   -Y,R18
                 __SAVELOCR2:
000297 931a      	ST   -Y,R17
000298 930a      	ST   -Y,R16
000299 9508      	RET
                 
                 __LOADLOCR4:
00029a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00029b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00029c 8119      	LDD  R17,Y+1
00029d 8108      	LD   R16,Y
00029e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  33 r1 :  18 r2 :   0 r3 :   0 r4 :  12 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   3 r18:   2 r19:   6 r20:   0 r21:   0 r22:  34 r23:  33 
r24:  30 r25:  21 r26:  56 r27:  35 r28:   4 r29:   1 r30: 135 r31:  57 
x  :  12 y  :  52 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  16 
adiw  :   6 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :   6 brpl  :   1 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  :  21 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   9 
cp    :   2 cpc   :   5 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  23 ld    :  24 ldd   :   9 ldi   :  68 
lds   :  29 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  13 movw  :  23 
mul   :  13 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   0 
ori   :   1 out   :  33 pop   :   4 push  :   4 rcall :  24 ret   :  26 
reti  :   2 rjmp  :  20 rol   :   3 ror   :   0 sbc   :   5 sbci  :   8 
sbi   :   9 sbic  :   2 sbis  :  11 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   0 sts   :  16 sub   :   3 subi  :   3 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 60 out of 116 (51.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00053e   1298     44   1342   16384   8.2%
[.dseg] 0x000060 0x00017e      0     30     30    1024   2.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
