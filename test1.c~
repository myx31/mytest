#include <mega16.h>
#include <delay.h>
#define up PINA.0
#define dw PINA.1
#define start_stop PINA.2
#define enable PIND.7
unsigned int value, captocdo;// set_PWM1_duty(value) thay doi DC
int ttdc; // trang thai dc TTDC=0: DC dung, TTDC=1 DC chay
unsigned char number[10] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};

// Khai báo bi?n
unsigned char duty = 128; // Giá tr? duty cycle m?c d?nh

void kt_start_stop()
{
     if(start_stop==0)
     {   
          delay_ms(20);
          if(start_stop==0)
          {    
               while(start_stop==0){}
               ttdc=~ttdc;
               if(ttdc==1) {captocdo=1;}
               else (captocdo=0);
          }
     }
}


void kt_up()
{
     if(up==0)
     {   
          delay_ms(20);
          if(up==0)
          {    
          while(up==0)
          captocdo++;
          if(captocdo>10)
          captocdo=10;
          }
     }
    }  
    

void kt_dw()
{
     if(dw==0)
     {   
          delay_ms(20);
          if(dw==0)
          {    
          while(dw==0)
          captocdo--;
          if(captocdo<1)
          captocdo=1;
          }
     }
    }

void hiemthi(unsigned int x)
{
     unsigned int temp;
     //unsigned char a,b,c,d;
     unsigned char m[4],i ;
     
  // tach so, luu vao 4 bien a b c d   
     temp=x;   
     for(i=0;i<4;i++)
     {
     m[3-i]=temp % 10;
     temp =temp/10;
     } 
     
     // dieu khien cho LED1 sang, hiem thi chu so a 
     PORTC.4 =0;
     PORTB = number[m[0]];
     delay_ms(1);
     PORTC.4 =1;
     // dieu khien cho LED2 sang, hiem thi chu so b 
     PORTC.5 =0;
     PORTB = number[m[1]];
     delay_ms(1);
     PORTC.5 =1;
     // dieu khien cho LED3 sang, hiem thi chu so c 
     PORTC.6 =0;
     PORTB = number[m[2]];
     delay_ms(1);
     PORTC.6 =1;     
     // dieu khien cho LED4 sang, hiem thi chu so d 
     PORTC.7 =0;
     PORTB = number[m[3]];
     delay_ms(1);
     PORTC.7 =1;   
}

void main(void)
{


// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
DDRA=0XFF;
PORTA=0XFF;
// Port B initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1 
PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
DDRB=0xFF;
PORTB=0xFF;
// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
DDRC=0xFF;
PORTC=0x0F;
// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);


value=0;
ttdc=0;
captocdo=0;

    
DDRD.0=1;
TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01); // Fast PWM mode, non-inverting, prescaler = 8

DDRD.5=1;
DDRD.7=1;
PORTD.0=1;
PORTD.5=0;
PORTD.7=1;

while (1)
      {
      hiemthi(1234); 
      if(ttdc==1)
         {
           kt_up();
           kt_dw();
         }
      kt_start_stop();
      value= captocdo*100;
      OCR0 = duty;
      delay_ms(1000);
      
        duty += 10;
        if (duty > 255) {
            duty = 0; 
            }
      }          
}
